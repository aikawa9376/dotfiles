snippet :f
${1:#:method_name}: function(${2:#:attribute}) {
  ${0:TARGET}
}

snippet function
function ${1:#:function_name}(${2:#:argument}) {
  ${0:TARGET}
}

snippet function2
function ${1:function_name}(${2:argument}) {
  ${0:TARGET}
}

snippet proto
${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {
  ${0:TARGET}
};


snippet f
function(${1}) { ${0:TARGET} };

snippet if
if (${1:true}) {
  ${0:TARGET}
}

snippet if-else
if (${1:#:condition}) {
  ${2:TARGET}
} else {
  ${3}
}

snippet for
for (let ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
  ${0:TARGET}
}

snippet forin
for (let ${1:i} in ${2:#:Things}) {
  ${0:TARGET}
}

snippet forof
for (let ${1:i} of ${2:#:Things}) {
  ${0:TARGET}
}

snippet while
while (${1:true}) {
  ${0:TARGET}
}

snippet switch
switch (${1:#:let}) {
  case ${2:#:val}:
       ${0:TARGET}
       break;
}

snippet try
try {
  ${1:TARGET}
} catch (${2:e}) {
  ${3}
}

snippet try_finally
try {
  ${1:TARGET}
} catch (${2:e}) {
  ${3}
} finally {
  ${4}
}


snippet key-value
${1:#:value_name}: ${0:#:value},

#snippet key
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet setTimeout-function
setTimeout(function() { ${0} }, ${1:10});

snippet debugger
debugger;

snippet console-log
console.log(${0:TARGET});

snippet console-trace
console.trace();

snippet console-error
console.error(${0:TARGET});

snippet console-warn
console.warn(${0:TARGET});

snippet console-info
console.info(${0:TARGET});

snippet iife
(function(${1}) {
 'use strict';
 ${0:TARGET}
 })(${2});

snippet js
JSON.stringify(${1:TARGET}, null, 2);

snippet jsc
console.log(JSON.stringify(${1:TARGET}, null, 2));

snippet     class-extends
class ${1:#:NAME} extends ${2:#:SuperClass} {
  constructor(${3:#:ARGS}) {
    ${0:TARGET}
  }
}

snippet     static
static ${1:#:NAME}(${2:#:ARGS}) {
  ${0:TARGET}
}

snippet     set
set ${1:#:NAME}(${2:#:ARGS}) {
  ${0:TARGET}
}

snippet     get
get ${1:#:NAME}() {
  ${0:TARGET}
}

snippet     import
import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";

