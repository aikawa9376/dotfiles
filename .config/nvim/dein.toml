[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_patterns = ['Session.vim', '.git/']
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_faster = 1
autocmd MyAutoCmd FileType help,defx,fzf IndentLinesToggle
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:jsx_ext_required = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual
let g:gitgutter_sign_added = '‚ûï'
let g:gitgutter_sign_modified = '„Ä∞'
let g:gitgutter_sign_removed = '‚ûñ'
let g:gitgutter_sign_removed_first_line = 'Ôø¶'
let g:gitgutter_sign_modified_removed = '‚åá'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap <silent> <Space>gs :Gstatus<CR>
nmap <silent> <Space>gd :Gdiff<CR>
nmap <silent> <Space>ga :Gwrite<CR>
nmap <silent> <Space>gr :Gremove<CR>
nmap <silent> <Space>gb :Gblame -w<CR>
'''

# design---------------------------------

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
set background=dark
autocmd MyAutoCmd ColorScheme * highlight Normal ctermbg=none
colorscheme solarized
let g:solarized_termcolors=16
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['lightline-bufferline']
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'nord',
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
    \ 'left': [
      \ ['mode', 'paste', 'spell', 'help'],
      \ ['vm_regions', 'gitgutter', 'fugitive', 'filename'],
    \ ],
    \ 'right': [
        \ ['linter_checking', 'linter_ok', 'linter_errors', 'linter_warnings'],
        \ ['lineinfo'],
        \ ['filetype', 'fileencoding', 'charcode', 'obsession'],
        \ ['vm_modes'],
    \   ]
  \ },
  \ 'tabline': {
    \ 'left': [
      \ ['buffers']
    \ ],
    \ 'right': [
      \ ['bufnum']
    \ ]
  \ },
  \ 'component': {
    \ 'lineinfo': '‚ò∞ %2p%% %2l:%v'
  \ },
  \ 'component_function': {
    \ 'mode': 'g:lightline.mode',
    \ 'modified': 'MyModified',
    \ 'readonly': 'MyReadonly',
    \ 'fugitive': 'MyFugitive',
    \ 'filename': 'MyFilename',
    \ 'filetype': 'MyFiletype',
    \ 'fileencoding': 'MyFileencoding',
    \ 'charcode': 'MyCharCode',
    \ 'gitgutter': 'MyGitGutter',
    \ 'vm_modes': 'g:lightline.vm_modes',
    \ 'vm_regions': 'g:lightline.vm_regions',
    \ 'obsession': 'MyObsession',
    \ },
  \ 'component_expand': {
    \ 'linter_checking': 'lightline#ale#checking',
    \ 'linter_ok': 'lightline#ale#ok',
    \ 'linter_warnings': 'lightline#ale#warnings',
    \ 'linter_errors': 'lightline#ale#errors',
    \ 'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_type': {
    \ 'linter_checking': 'left',
    \ 'linter_ok': 'left',
    \ 'linter_warnings': 'warning',
    \ 'linter_errors': 'error',
    \ 'buffers': 'tabsel'
  \ },
  \ 'component_function_visible_condition': {
    \ 'vm_modes': 'g:lightline.VM()',
    \ 'vm_regions': 'g:lightline.VM()',
  \ },
  \ 'separator': {'left': "\u2b80", 'right': "\u2b82"},
  \ 'subseparator': {'left': "\u2b81", 'right': "\u2b83"}
\ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyObsession()
  if exists('*ObsessionStatus')
    return ObsessionStatus('üíæ', '')
  else
    return ''
  endif
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\u2b64" : ''
endfunction

function! MyFilename()
  return WebDevIconsGetFileTypeSymbol() . ' ' . ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
  \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
      \ &ft == 'unite' ? unite#get_status_string() :
      \ &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
      \ '' != @% ? @% : '[No Name]') .
  \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? "\u2b60 "._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? WebDevIconsGetFileFormatSymbol() . ' ' . (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
  \ || ! get(g:, 'gitgutter_enabled', 0)
  \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
    \ g:gitgutter_sign_added . '',
    \ g:gitgutter_sign_modified . '',
    \ g:gitgutter_sign_removed . ''
  \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

let g:lightline.VM = { -> exists("g:Vm") && g:Vm.is_active }

fun! g:lightline.mode() dict
  if g:lightline.VM()
    call lightline#link('v')
    return "V-MULTI"
  else
    return lightline#mode()
  endif
endfun

fun! g:lightline.vm_modes() dict
  if g:lightline.VM()
    let v = g:Vm
    let V = b:VM_Selection.Vars
    let m = v.mappings_enabled ? 'M' : 'm'
    let b = V.block_mode ? 'B' : 'b'
    let o = V.only_this_always ? 'O' : 'o'
    let l = V.multiline ? 'V' : 'v'
    return m.b.o.l
  endif
  return ''
endfun

fun! g:lightline.vm_regions() dict
  if g:lightline.VM()
    let V = b:VM_Selection.Vars
    let i = V.index + 1
    let max = len(b:VM_Selection.Regions)
    return i.' / '.max
  endif
  return ''
endfun
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale']
hook_add = '''
let g:lightline#ale#indicator_warnings = '‚ö† :'
let g:lightline#ale#indicator_errors = '‚ùå:'
let g:lightline#ale#indicator_ok = 'üÜó'
'''

[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
hook_add = '''
set showtabline=2
let g:lightline#bufferline#enable_devicons   = 1
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#show_number       = 1
let g:lightline#bufferline#shorten_path      = 0
let g:lightline#bufferline#unnamed           = '[No Name]'
'''
