vim.keymap.set("n", "<Space>", "<Leader>", { remap = true })
vim.keymap.set("v", "<Space>", "<Leader>", { remap = true })
vim.keymap.set("x", "<Space>", "<Leader>", { remap = true })
vim.keymap.set("o", "<Space>", "<Leader>", { remap = true })
vim.keymap.set("n", ";", "<Leader>", { remap = true })
vim.keymap.set("v", ";", "<Leader>", { remap = true })
vim.keymap.set("x", ";", "<Leader>", { remap = true })
vim.keymap.set("o", ";", "<Leader>", { remap = true })
vim.keymap.set("n", "x", '"_x')
vim.keymap.set("x", "x", '"_x')
vim.keymap.set("n", "cl", '"_s')
vim.keymap.set("x", "cl", '"_s')
vim.keymap.set("x", "<", "<gv")
vim.keymap.set("x", ">", ">gv")
vim.keymap.set("n", "<CR>", "i<CR><Esc>==")
vim.keymap.set("n", "<Leader><CR>", "$a<CR><Esc>")
vim.keymap.set("n", "]<space>", "mzo<ESC>`zj")
vim.keymap.set("n", "[<space>", "mzO<ESC>`zk")
vim.keymap.set("n", "X", "diw")
vim.keymap.set("i", "<C-a>", "<C-g>U<Home>")
vim.keymap.set("i", "<C-e>", "<C-g>U<End>")
vim.keymap.set("i", "<C-b>", "<C-g>U<Left>")
vim.keymap.set("i", "<C-f>", "<C-g>U<Right>")
vim.keymap.set("i", "<C-n>", "<C-g>U<Down>")
vim.keymap.set("i", "<C-p>", "<C-g>U<Up>")
vim.keymap.set("i", "<C-h>", "<C-g>U<BS>", { remap = true })
vim.keymap.set("i", "<C-d>", "<C-g>U<Del>")
vim.keymap.set("i", "<C-k>", "<C-g>U<C-o>D")
vim.keymap.set("i", "<C-u>", "<C-g>U<C-u>")
vim.keymap.set("i", "<C-w>", "<C-g>U<C-w>")
vim.keymap.set("i", "<M-f>", "<C-g>U<S-Right>")
vim.keymap.set("i", "<M-b>", "<C-g>U<S-Left>")
vim.keymap.set("i", "<M-p>", "<C-g>U<C-r>0")
vim.keymap.set("i", "<C-v>", '<C-g>U<C-o>yh<C-g>U<C-r>"<C-g>U<Right>')
vim.keymap.set("n", "Y", "m`mvmry$")
vim.keymap.set("n", "V", "v$")
vim.keymap.set("n", "vv", "V")
vim.keymap.set("n", "gV", "'`['.strpart(getregtype(), 0, 1).'`]'", { expr = true, silent = true })
vim.keymap.set("n", "v", "m`mvv")
vim.keymap.set("n", "d", "m`mvd")
vim.keymap.set("n", "c", "m`mvc")
vim.keymap.set("n", ":", "m`mv:")
vim.keymap.set("n", "=", "m`mv=")
vim.keymap.set("n", "=f", "mv`[=`]`v")
vim.keymap.set("n", "<C-v>", "mv<C-v>")
vim.keymap.set("n", "<M-x>", "vy")
vim.keymap.set("n", "<C-h>", "^")
vim.keymap.set("x", "<C-h>", "^")
vim.keymap.set("n", "<C-l>", "$l")
vim.keymap.set("x", "<C-l>", "$l")
vim.keymap.set("n", "<M-m>", '<cmd>call cursor(0,strlen(getline("."))/2)<CR>', { silent = true })
vim.keymap.set("n", "<M-l>", "i<Space><ESC><Right>")
vim.keymap.set("n", "<M-h>", "hx")
vim.keymap.set("n", "<M-j>", "<cmd>bnext<CR>", { silent = true })
vim.keymap.set("n", "<M-k>", "<cmd>bprevious<CR>", { silent = true })
vim.keymap.set("n", "]n", "ngn<ESC>")
vim.keymap.set("n", "[n", "Ngn<ESC>")
vim.keymap.set("n", "gj", "J")
vim.keymap.set("i", "jj", "<Esc>", { silent = true })
vim.keymap.set("i", "っｊ", "<Esc>", { silent = true })
vim.keymap.set("n", "っｊ", "Fcitx2en()", { expr = true, silent = true })
vim.keymap.set("n", "Y", "y$")
vim.keymap.set("n", "V", "v$")
vim.keymap.set("n", "vv", "V")
vim.keymap.set("n", "|", "<cmd>vsplit<CR><C-w>h", { silent = true })
vim.keymap.set("n", "-", "<cmd>split<CR><C-w>k", { silent = true })
vim.keymap.set("n", "<C-q>", "@q")
vim.keymap.set("n", "<Leader>rw", ":%s///g<Left><Left><Left>")
vim.keymap.set("n", "<Leader>rW", ':%s/<c-r>=expand("<cword>")<cr>//g<Left><Left>')
vim.keymap.set("x", "<Leader>rw", 'y:%s/<c-r>"//g<Left><Left><Left>')
vim.keymap.set("n", "<M-;>", "mz$a;<ESC>`z")
vim.keymap.set("n", "<M-,>", "mz$a,<ESC>`z")
vim.keymap.set("i", "<C-l>", "<C-x><C-l>")
vim.keymap.set("n", "cd", "<cmd>lcd %:p:h<bar>pwd<cr>")
vim.keymap.set("n", "cu", "<cmd>lcd ..<bar>pwd<cr>")
vim.keymap.set("c", "<C-b>", "<Left>")
vim.keymap.set("c", "<C-f>", "<Right>")
vim.keymap.set("c", "<C-a>", "<Home>")
vim.keymap.set("c", "<C-e>", "<End>")
vim.keymap.set("c", "<C-d>", "<Del>")
vim.keymap.set("c", "<C-Y>", "<C-R>-")
vim.keymap.set("n", "<Leader>", "<Nop>")
vim.keymap.set("n", "<Leader>w", "<cmd>w<CR>", { silent = true })
vim.keymap.set("n", "<Leader>W", "<cmd>bufdo! w<CR>", { silent = true })
vim.keymap.set("n", "<Leader>X", "<cmd>lua Snacks.bufdelete.other()<CR>", { silent = true })
vim.keymap.set("n", "<Leader>z", "<cmd>lua Snacks.bufdelete.all()<CR>")
vim.keymap.set("n", "ZZ", "<cmd>TermForceCloseAll<CR><cmd>xa<CR>", { silent = true })
vim.keymap.set("n", "<M-b>", "<cmd>bnext<CR>", { silent = true })
vim.keymap.set("n", "<C-g>", "m`<C-^>", { silent = true })
-- map('t', '<C-[>', '<C-\\><C-n>', { remap = true, silent = true })
vim.keymap.set("t", "<C-_>", "<C-\\><C-n>", { silent = true })
-- map('t', '<C-w><c-w>', '<C-\\><C-n><C-w><c-w>', { remap = true, silent = true })
-- vim.keymap.set("t", "<M-j>", "<M-j>", { silent = true })
-- vim.keymap.set("t", "<M-k>", "<M-k>", { silent = true })
-- vim.keymap.set("t", "<M-d>", "<M-d>", { silent = true })
-- vim.keymap.set("t", "<M-c>", "<M-c>", { silent = true })
vim.keymap.set("n", "S", "<cmd>WorkspaceSymbol<CR>", { silent = true })
vim.keymap.set('x', '<leader>@', function()
  local start_pos = vim.fn.getpos('v')
  local end_pos = vim.fn.getpos('.')
  local sline = tonumber(start_pos[2]) or vim.fn.line('.')
  local eline = tonumber(end_pos[2]) or sline
  if sline > eline then sline, eline = eline, sline end

  local bufname = vim.api.nvim_buf_get_name(0)
  local relpath = vim.fn.fnamemodify(bufname, ':.')
  if relpath == '' then
    relpath = vim.fn.expand('%:t')
  end
  local text = relpath .. ':' .. sline .. '-' .. eline

  vim.fn.setreg('+', text)
  vim.fn.setreg('"', text)
  vim.notify('Copied: ' .. text, vim.log.levels.INFO)
end, { noremap = true, silent = true, desc = "Copy selection range as filename:start-end" })
