# shougo---------------------------------

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet', 'context_filetype.vim', 'neco-syntax', 'echodoc.vim', 'neoinclude.vim', 'FastFold']
do =  'UpdateRemotePlugins'
hook_source = '''
" deoplete setup
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 100
" let g:deoplete#sources#padawan#server_autostart = 0
" let g:deoplete#sources#padawan#add_parentheses = 1

" call deoplete#custom#source('neosnippet', 'rank', 1000)
call deoplete#custom#source('tag', 'min_pattern_length', 4)
call deoplete#custom#source('padawan', 'mark', '[P]')
call deoplete#custom#source('padawan', 'rank', 10)
" call deoplete#custom#option('sources', {
"     \ '_': ['neosnippet', 'buffer', 'tag', 'padawan'],
"     \})
'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_event = 'InsertEnter'
on_ft = ['snippet']
hook_source = '''
" Snippet key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-Space> <Plug>(neosnippet_expand_or_jump)
smap <C-Space> <Plug>(neosnippet_expand_or_jump)
xmap <C-Space> <Plug>(neosnippet_expand_target)

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#same_filetypes = {}
endif
let g:context_filetype#same_filetypes.php = 'phtml'
let b:context_filetype_filetypes = context_filetype#default_filetypes()
call extend(b:context_filetype_filetypes,
      \ {'php' : [
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'javascript',
      \   },
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\? type="text/coffeescript"\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'coffee',
      \   },
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'javascript',
      \   },
      \   {
      \    'start':
      \     '<style\%( [^>]*\)\?>',
      \    'end': '</style>', 'filetype': 'css',
      \   },
      \   {
      \    'start':
      \     '<[^>]\+ style=\([''"]\)',
      \    'end': '\1', 'filetype': 'css',
      \   },
      \ ]})
'''

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
let g:echodoc#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'konfekt/FastFold'

[[plugins]]
repo = 'Shougo/vimshell'
rev = '3787e5'

# text-----------------------------------

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
on_ft = ['html', 'php', 'phtml', 'js']
hook_add = '''
let g:user_emmet_install_global = 0
autocmd FileType phtml,html,php,css EmmetInstall
imap <silent> <M-,> <C-y>,
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_event = 'InsertEnter'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
on_event = 'VimEnter'
hook_post_source = '''
augroup MyVimrc
    autocmd!
    autocmd MyVimrc BufNewFile,BufRead,InsertLeave dein*.toml call Syntax_range_dein()
augroup END
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_post_source = 'call SetLeximaAddRule()'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:hatpos:toggle)'
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_event = 'VimEnter'

[[plugins]]
repo = 'bfredl/nvim-miniyank'
on_event = 'VimEnter'
hook_add = '''
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)
let g:miniyank_filename = $HOME."/.miniyank.mpack"
let g:miniyank_maxitems = 100
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
on_event = 'VimEnter'
hook_add = '''
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T
map S S
autocmd ColorScheme * highlight Sneak ctermbg=24 ctermfg=16
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_event = 'VimEnter'
hook_add = '''
function! Multiple_cursors_before()
  let b:deoplete_disable_auto_complete = 1
endfunction

function! Multiple_cursors_after()
  let b:deoplete_disable_auto_complete = 0
endfunction
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region_expand)'
hook_add = '''
nmap - <Plug>(expand_region_expand)
vmap - <Plug>(expand_region_expand)
nmap _ <Plug>(expand_region_shrink)
vmap _ <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
on_map = '<Plug>(easymotion-s2)'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
nmap m <Plug>(easymotion-s2)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
depends = ['vim-textobj-entire', 'vim-textobj-indent', 'vim-textobj-php', 'vim-textobj-line', 'vim-textobj-syntax', 'vim-textobj-comment', 'vim-textobj-between', 'vim-textobj-from_regexp']
on_event = 'VimEnter'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'thinca/vim-textobj-between'

[[plugins]]
repo = 'kana/vim-textobj-syntax'

[[plugins]]
repo = 'glts/vim-textobj-comment'

[[plugins]]
repo = 'akiyan/vim-textobj-php'

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'

[[plugins]]
repo = 'kana/vim-operator-user'
depends = ['vim-operator-replace']
on_map = '<plug>(operator-replace)'
on_event = 'VimEnter'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
nmap <C-s> <plug>(operator-replace)
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'VimEnter'

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]]
repo = 'tpope/vim-abolish'
on_event = 'VimEnter'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = 'VimEnter'

[[plugins]]
repo = 'thirtythreeforty/lessspace.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'matze/vim-move'
on_event = 'VimEnter'

# list-----------------------------------

[[plugins]]
repo = 'scrooloose/nerdtree'
depends = ['nerdtree-git-plugin']
on_cmd = ['NERDTreeToggle']
hook_add = '''
" nnoremap <silent> <Space>n :NERDTreeToggle<CR>
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeMinimalUI = 1
'''

[[plugins]]
repo = 'xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'junegunn/fzf'
depends = ['fzf.vim']
build = './install'
merged = 0
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" fzfからファイルにジャンプできるようにする
let g:fzf_buffers_jump = 1
nnoremap <silent> <Space>f :Files<CR>
nnoremap <silent> <Space>b :Buffers<CR>
nnoremap <silent> <Space>a :Ag<CR>
nnoremap <silent> <Space>l :Lines<CR>
nnoremap <silent> <Space>e :MRUFilesCWD<CR>
nnoremap <silent> <Space>. :DotFiles<CR>
" <C-]>でタグ検索
nnoremap <silent> <C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
nnoremap <silent> <Space>p :YanksAfter<CR>
nnoremap <silent> <Space>P :YanksBefore<CR>

command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#wrap('fzf',
      \ {'options': "--preview 'pygmentize -g {}'"}))
command! -bang -nargs=* Ag
      \call fzf#vim#ag(<q-args>, fzf#wrap('rg',
      \ {'options': "--preview 'pygmentize -g $(cut -d: -f1 <<< {}) | sed -n $(cut -d: -f2 <<< {}),\\$p | head -".&lines."'"}))
command! -bang Lines
      \ call fzf#vim#lines({'options': '--reverse --height 40%'}, <bang>0)

command! DotFiles execute 'Files ~/dotfiles'

" Outline handling,
function! s:outline_format(lists)
  for list in a:lists
    let linenr = list[2][:len(list[2])-3]
    let line = getline(linenr)
    let idx = stridx(line, list[0])
    let len = len(list[0])
    let list[0] = line[:idx-1] . printf("\x1b[%s%sm%s\x1b[m", 34, '', line[idx:idx+len-1]) . line[idx+len:]
  endfor
  for list in a:lists
    call map(list, "printf('%s', v:val)")
  endfor
  return a:lists
endfunction

function! s:outline_source(tag_cmds)
  if !filereadable(expand('%'))
    throw 'Save the file first'
  endif

  for cmd in a:tag_cmds
    let lines = split(system(cmd), "\n")
    if !v:shell_error
      break
    endif
  endfor
  if v:shell_error
    throw get(lines, 0, 'Failed to extract tags')
  elseif empty(lines)
    throw 'No tags found'
  endif
  return map(s:outline_format(map(lines, 'split(v:val, "\t")')), 'join(v:val, "\t")')
endfunction

function! s:outline_sink(lines)
  if !empty(a:lines)
    let line = a:lines[0]
    execute split(line, "\t")[2]
  endif
endfunction

function! s:outline(...)
  let args = copy(a:000)
  let tag_cmds = [
    \ printf('ctags -f - --sort=no --excmd=number --language-force=%s %s 2>/dev/null', &filetype, expand('%:S')),
    \ printf('ctags -f - --sort=no --excmd=number %s 2>/dev/null', expand('%:S'))]
  return {
    \ 'source':  s:outline_source(tag_cmds),
    \ 'sink*':   function('s:outline_sink'),
    \ 'options': '--reverse +m -d "\t" --with-nth 1 -n 1 --ansi --prompt "Outline> "'}
endfunction

command! -bang Outline call fzf#run(fzf#wrap('outline', s:outline(), <bang>0))
nnoremap <silent> <space>O :Outline<CR>

" MRU handling, limited to current directory
command! MRUFilesCWD call fzf#run({
\  'source': s:mru_files_for_cwd(),
\  'sink': 'edit',
\  'options': '-m -x +s --prompt=MRU:'.shellescape(pathshorten(getcwd())).'/',
\  'down': '40%'})

" This relies on the yegappan/mru plugin for live MRU updating. Also relies on
" the fact that you don't change the location of the file it uses as its cache.
function! s:mru_files_for_cwd()
  return map(filter(
  \  systemlist("sed -n '2,$p' ~/.vim_mru_files"),
  \  "v:val =~ '^" . getcwd() . "' && v:val !~ '__Tagbar__\\|\\[YankRing]\\|fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"
  \ ), 'fnamemodify(v:val, ":p:.")')
endfunction

" BookMark handling, limited to current directory

function! FZFYankList() abort
  function! KeyValue(key, val)
    let line = join(a:val[0], '⏎')
    if (a:val[1] ==# 'V')
      let line = '⏎'.line
    endif
    return a:key.' '.line
  endfunction
  return map(miniyank#read(), function('KeyValue'))
endfunction

function! FZFYankHandler(opt, line) abort
  let key = substitute(a:line, ' .*', '', '')
  if !empty(a:line)
    let yanks = miniyank#read()[key]
    call miniyank#drop(yanks, a:opt)
  endif
endfunction

command! YanksAfter call fzf#run(fzf#wrap('YanksAfter', {
\ 'source':  FZFYankList(),
\ 'sink':    function('FZFYankHandler', ['p']),
\ 'options': '--no-sort --prompt="Yanks-p> "',
\ }))

command! YanksBefore call fzf#run(fzf#wrap('YanksBefore', {
\ 'source':  FZFYankList(),
\ 'sink':    function('FZFYankHandler', ['P']),
\ 'options': '--no-sort --prompt="Yanks-P> "',
\ }))
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''
nnoremap <silent> <Space>o :TagbarToggle<CR>
let g:tagbar_autopreview = 1
let g:tagbar_compact = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_width = 40
let g:tagbar_previewwin_pos = 'rightbelow'
'''

[[plugins]]
repo = 'junegunn/vim-peekaboo'
on_event = 'VimEnter'

[[plugins]]
repo = 'yegappan/mru'
on_event = 'VimEnter'
hook_add = '''
let MRU_Max_Entries = 1000
'''

# git------------------------------------

[[plugins]]
repo = 'tpope/vim-fugitive'
depends = ['gitv']
on_cmd = ['Gstatus', 'Gdiff', 'Gremove', 'Gblame', 'Gitv']
hook_add = '''
nmap <silent> <Space>s :Gstatus<CR>
nmap <silent> <Space>d :Gdiff<CR>
" nmap <silent> <Space>w :Gwrite<CR>
nmap <silent> <Space>r :Gremove<CR>
nmap <silent> <Space>h :Gblame<CR>
" test
nmap <Space>g :call fugitive#detect(@%)<CR>
'''

[[plugins]]
repo = 'gregsexton/gitv'
hook_source = '''
autocmd FileType gitv call s:my_gitv_settings()
function! s:my_gitv_settings()
  setlocal iskeyword+=/,-,.
  nnoremap <silent><buffer> C :<C-u>Git checkout <C-r><C-w><CR>
  nnoremap <silent><buffer> t :<C-u>windo call <SID>toggle_git_folding()<CR>1<C-w>w
  nnoremap <buffer> <Space>rb :<C-u>Git rebase <C-r>=GitvGetCurrentHash()<CR><Space>
  nnoremap <buffer> <Space>R :<C-u>Git revert <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>h :<C-u>Git cherry-pick <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR>
endfunction
function! s:gitv_get_current_hash()
  return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
endfunction
autocmd FileType git setlocal nofoldenable foldlevel=0
function! s:toggle_git_folding()
  if &filetype ==# 'git'
    setlocal foldenable!
  endif
endfunction
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'VimEnter'

# lint & lsp & sources-------------------

[[plugins]]
repo = 'w0rp/ale'
on_event = 'VimEnter'
hook_add = '''
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['html'] = ['tidy']
let g:ale_fixers['css'] = ['prettier']
let g:ale_fixers['scss'] = ['prettier']
" let g:ale_fixers['php'] = ['tidy', 'prettier']
let g:ale_fixers['php'] = ['prettier']
let g:ale_linters = {}
" let g:ale_linters['php'] = ['phan']
" ファイル保存時に実行
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 0
" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
" 設定を見直す必要あり
let g:ale_php_phan_executable = 'vendor/bin/phan'
let g:ale_html_tidy_options = '-config .tidyrc'
'''

# php------------------------------------

[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'captbaritone/better-indent-support-for-php-with-html'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'padawan-php/deoplete-padawan'
build = 'composer install'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['html', 'php', 'phtml', 'js']

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = ['ts']
