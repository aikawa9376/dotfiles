# lsp-----------------------------------
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends  = ['mason.nvim', 'mason-lspconfig.nvim']

[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
hook_source = '''
lua require'lsp'
'''

# [[plugins]]
# repo = 'williamboman/nvim-lsp-installer'
# hook_source = '''
# lua require'lsp'
# '''

[[plugins]]
repo = 'nvimtools/none-ls.nvim'
lua_source = '''
require'plugins.null-ls'
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_event = ['VimEnter']

[[plugins]]
repo = 'lukas-reineke/lsp-format.nvim'
lua_source = '''
require("lsp-format").setup {
  blade = {
    exclude = { "intelephense" }
  }
}
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
hook_source = '''
lua require'plugins.dressing'
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_event = ['InsertEnter', 'CursorHold']
depends  = [
  'nvim-lspconfig', 'none-ls.nvim', 'noice.nvim', 'lualine.nvim' 'nvim-insx'
  'LuaSnip', 'friendly-snippets', 'cmp-nvim-lsp', 'lsp-format.nvim', 'lspkind-nvim',
  'inlay-hints.nvim', 'lsp_signature.nvim', 'vim-illuminate', 'dressing.nvim'
]
lua_source = '''
require'plugins.nvim-cmp'
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_event = ['InsertEnter', 'CmdLineEnter']
depends  = [
  'cmp-rg', 'cmp_luasnip', 'cmp-path',
  'cmp-tabnine', 'cmp-tmux', 'vim-snippets'
]

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-document-symbol'

[[plugins]]
repo = 'andersevenrud/cmp-tmux'

[[plugins]]
repo = 'dmitmel/cmp-cmdline-history'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_event = ['InsertEnter', 'CmdLineEnter']
depends  = [
  'cmp-cmdline-history', 'cmp-nvim-lsp-document-symbol'
]

[[plugins]]
repo = 'amarakon/nvim-cmp-buffer-lines'

# [[plugins]]
# repo = 'jackMort/ChatGPT.nvim'
# depends = ['plenary.nvim', 'nui.nvim', 'telescope.nvim']
# on_cmd = ['ChatGPT']
# hook_source = '''
# lua << EOF
# require("chatgpt").setup(
#   {
#     welcome_message = WELCOME_MESSAGE,
#     loading_text = "loading",
#     question_sign = "", -- you can use emoji if you want e.g. 🙂
#     answer_sign = "ﮧ", -- 🤖
#     max_line_length = 120,
#     yank_register = "+",
#     chat_layout = {
#       relative = "editor",
#       position = "50%",
#       size = {
#         height = "80%",
#         width = "80%",
#       },
#     },
#     settings_window = {
#       border = {
#         style = "rounded",
#         text = {
#           top = " Settings ",
#         },
#       },
#     },
#     chat_window = {
#       filetype = "chatgpt",
#       border = {
#         highlight = "FloatBorder",
#         style = "rounded",
#         text = {
#           top = " ChatGPT ",
#         },
#       },
#     },
#     chat_input = {
#       prompt = "  ",
#       border = {
#         highlight = "FloatBorder",
#         style = "rounded",
#         text = {
#           top_align = "center",
#           top = " Prompt ",
#         },
#       },
#     },
#     openai_params = {
#       model = "gpt-3.5-turbo",
#       frequency_penalty = 0,
#       presence_penalty = 0,
#       max_tokens = 300,
#       temperature = 0,
#       top_p = 1,
#       n = 1,
#     },
#     openai_edit_params = {
#       model = "code-davinci-edit-001",
#       temperature = 0,
#       top_p = 1,
#       n = 1,
#     },
#     keymaps = {
#       close = { "<C-c>" },
#       submit = "<C-Space>",
#       yank_last = "<C-y>",
#       yank_last_code = "<C-k>",
#       scroll_up = "<C-u>",
#       scroll_down = "<C-d>",
#       toggle_settings = "<C-o>",
#       new_session = "<C-n>",
#       cycle_windows = "<Tab>",
#       -- in the Sessions pane
#       select_session = "<Space>",
#       rename_session = "r",
#       delete_session = "d",
#     },
#   }
# )
# EOF
# '''
#
# [[plugins]]
# repo = 'nvim-telescope/telescope.nvim'

# [[plugins]]
# repo = 'Maan2003/lsp_lines.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# lua require("lsp_lines").register_lsp_virtual_lines()
# '''

# [[plugins]]
# repo = 'zbirenbaum/copilot-cmp'
#
# [[plugins]]
# repo = 'zbirenbaum/copilot.lua'
# depends = ['copilot-cmp']
# on_event = 'InsertEnter'
# hook_source = '''
# lua << EOF
# vim.schedule(function() require("copilot").setup({
# plugin_manager_path = '/home/aikawa/.cache/dein/repos/github.com/zbirenbaum'
# }) end)
# EOF
# '''

[[plugins]]
repo = 'tzachar/cmp-tabnine'
build = './install.sh'

[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'

[[plugins]]
repo = 'lukas-reineke/cmp-rg'

[[plugins]]
repo = 'L3MON4D3/LuaSnip'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'kosayoda/nvim-lightbulb'
on_event = 'CursorMoved'
hook_source = '''
lua require'plugins.lightbulb'
'''

[[plugins]]
repo = 'onsails/lspkind-nvim'

[[plugins]]
repo = 'pmizio/typescript-tools.nvim'
on_lua = 'typescript-tools'

[[plugins]]
repo = 'simrat39/rust-tools.nvim'
on_lua = 'rust-tools'

[[plugins]]
repo = 'RRethy/vim-illuminate'

# [[plugins]]
# repo = 'j-hui/fidget.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# lua << EOF
# require"fidget".setup{
#   fmt = {
#     stack_upwards = false,
#   },
#   text = {
#     spinner = "dots",
#   },
# }
# EOF
# '''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

[[plugins]]
repo = 'MysticalDevil/inlay-hints.nvim'
lua_source = '''
require("inlay-hints").setup()
'''

[[plugins]]
repo = 'ThePrimeagen/refactoring.nvim'
on_lua = 'refactoring.nvim'
lua_source = '''
require('refactoring').setup({})
vim.api.nvim_set_keymap(
    "v",
    "<leader>rf",
    ":lua require('refactoring').select_refactor()<CR>",
    { noremap = true, silent = true, expr = false }
)
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_source = '''
require("notify").setup({
  on_open = function (win)
    vim.api.nvim_win_set_config(win, { focusable = false })
  end,
  max_width = 100,
  top_down = false,
  background_colour = '#002b36'
})
'''

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim', 'nvim-notify']
lua_source = '''
require'plugins.noice'
'''

[[plugins]]
repo = 'b0o/incline.nvim'
on_event = 'CursorMoved'
lua_source = '''
require'plugins.incline'
'''

[[plugins]]
repo = 'cseickel/diagnostic-window.nvim'
on_cmd = 'DiagWindowShow'

# [[plugins]]
# repo = 'lukas-reineke/indent-blankline.nvim'
# on_event = 'CursorMoved'
# lua_source = '''
# require("indent_blankline").setup {
#   char = "",
#   char_blankline = "",
#   context_char = "│",
#   context_char_blankline = "│",
#   show_current_context = true,
#   context_patterns = {
#     "class",
#     "^func",
#     "method",
#     "^if",
#     "while",
#     "for",
#     "with",
#     "try",
#     "except",
#     "arguments",
#     "argument_list",
#     "object",
#     "dictionary",
#     "element",
#     "table",
#     "tuple",
#     "arrow_function",
#     "do_block",
#   }
# }
# '''

# 良さげだけどbaggy
# [[plugins]]
# repo = 'shellRaining/hlchunk.nvim'
# on_event = 'UIEnter'
# lua_source = '''
# require("hlchunk").setup ({
#     chunk = {
#         enable = true,
#         notify = false,
#         use_treesitter = true,
#         chars = {
#             horizontal_line = "─",
#             vertical_line = "│",
#             left_top = "╭",
#             left_bottom = "╰",
#             right_arrow = ">",
#         },
#         style = {
#             { fg = "#094b5c" },
#             { fg = "#073642" }, -- this fg is used to highlight wrong chunk
#         },
#         textobject = "",
#         max_file_size = 1024 * 1024,
#         error_sign = false,
#     },
#     indent = {
#         enable = false,
#     },
#     line_num = {
#         enable = false,
#         use_treesitter = false,
#         style = "#806d9c",
#     },
#     blank = {
#         enable = false,
#         chars = {
#             "․",
#         },
#         style = {
#             vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID("Whitespace")), "fg", "gui"),
#         },
#     },
# })
# '''

# [[plugins]]
# repo = 'nvimdev/lspsaga.nvim'
# on_event = 'CursorMoved'
# lua_source = '''
# require("lspsaga").setup({
#   symbol_in_winbar = {
#     enable = false
#   },
#   lightbulb = {
#     enable = true,
#     sign = false,
#     virtualtext = true,
#   },
#   callhierarchy = {
#     layout = 'normal'
#   },
#   ui = {
#     code_action = 'A'
#   }
# })
# '''

[[plugins]]
repo = 'hedyhli/outline.nvim'
on_cmd = 'Outline'
lua_source = '''
require("outline").setup {
  outline_window = {
    width = 20,
    focus_on_open = false,
  },
  symbol_folding = {
    -- Depth past which nodes will be folded by default. Set to false to unfold all on open.
    autofold_depth = false,
    -- When to auto unfold nodes
    auto_unfold = {
      -- Auto unfold currently hovered symbol
      hovered = true,
      -- Auto fold when the root level only has this many nodes.
      -- Set true for 1 node, false for 0.
      only = true,
    },
    markers = { '', '' },
  },
}
'''
hook_add = '''
nnoremap <leader>o <cmd>Outline<CR>
'''

# [[plugins]]
# repo = 'ThePrimeagen/harpoon'
# on_event = 'CursorMoved'
# lua_source = '''
# require("harpoon").setup({
#   menu = {
#     title = '',
#     width = vim.api.nvim_win_get_width(0) - 60,
#     borderchars = { '', '', '', '', '', '', '', '' },
#   },
#   global_settings = {
#     save_on_toggle = false,
#     save_on_change = true,
#     enter_on_sendcmd = false,
#     tmux_autoclose_window = false,
#     excluded_filetypes = { "harpoon" },
#     mark_branch = false,
#   }
# })
# vim.api.nvim_set_keymap("n", "mm", "<cmd>lua require('harpoon.mark').add_file()<CR>", { silent = true })
# vim.api.nvim_set_keymap("n", ";", "<cmd>lua require('harpoon.ui').toggle_quick_menu()<CR>", { silent = true })
# vim.api.nvim_set_keymap("n", "]e", "<cmd>lua require('harpoon.ui').nav_next()<CR>", { silent = true })
# vim.api.nvim_set_keymap("n", "[e", "<cmd>lua require('harpoon.ui').nav_prev()<CR>", { silent = true })
# '''

# [[plugins]]
# repo = 'marcomayer/calltree.nvim'
# on_event = 'CursorHold'
# lua_source = '''
# require('calltree').setup({})
# '''

# text-----------------------------------

[[plugins]]
repo = 'cappyzawa/trim.nvim'
on_event = 'InsertEnter'
lua_source = '''
require'trim'.setup({fb_blocklist = {"markdown"}})
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = [
  'html', 'php', 'jst', 'twig',
  'phtml', 'javascript', 'css', 'scss',
  'typescriptreact', 'javascriptreact'
]
hook_add = '''
let g:user_emmet_install_global        =  0
let g:user_emmet_mode                  = 'iv'
let g:user_emmet_expandabbr_key        = '<M-,>'
let g:user_emmet_expandword_key        = '<M-e>w'
let g:user_emmet_update_tag            = '<M-e>u'
let g:user_emmet_balancetaginward_key  = '<M-e>d'
let g:user_emmet_balancetagoutward_key = '<M-e>D'
let g:user_emmet_next_key              = '<M-e>n'
let g:user_emmet_prev_key              = '<M-e>N'
let g:user_emmet_imagesize_key         = '<M-e>i'
let g:user_emmet_togglecomment_key     = '<M-e>/'
let g:user_emmet_splitjointag_key      = '<M-e>j'
let g:user_emmet_removetag_key         = '<M-e>k'
let g:user_emmet_anchorizeurl_key      = '<M-e>a'
let g:user_emmet_anchorizesummary_key  = '<M-e>A'
let g:user_emmet_mergelines_key        = '<M-e>m'
let g:user_emmet_codepretty_key        = '<M-e>c'
let g:user_emmet_imageencode_key       = '<M-e>I'
autocmd MyAutoCmd FileType phtml,html,php,blade,css,scss,twig,typescriptreact,javascriptreact EmmetInstall
'''

# [[plugins]]
# repo = 'RRethy/vim-hexokinase'
# build = 'make hexokinase'
# on_ft = ['css', 'scss']
# hook_add = '''
# let g:Hexokinase_ftAutoload = ['css', 'scss', 'sass', 'xml']
# '''

[[plugins]]
repo = 'NvChad/nvim-colorizer.lua'
# on_lua = 'nvim-colorizer.lua'
on_event = 'CursorMoved'
lua_source = '''
require("colorizer").setup {
  filetypes = { "*", "!fugitive", "!noice" },
  user_default_options = {
    RGB = true, -- #RGB hex codes
    RRGGBB = true, -- #RRGGBB hex codes
    names = false, -- "Name" codes like Blue or blue
    RRGGBBAA = false, -- #RRGGBBAA hex codes
    AARRGGBB = false, -- 0xAARRGGBB hex codes
    rgb_fn = true, -- CSS rgb() and rgba() functions
    hsl_fn = true, -- CSS hsl() and hsla() functions
    css = false, -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
    css_fn = true, -- Enable all CSS *functions*: rgb_fn, hsl_fn
    -- Available modes for `mode`: foreground, background,  virtualtext
    mode = "virtualtext", -- Set the display mode.
    -- Available methods are false / true / "normal" / "lsp" / "both"
    -- True is same as normal
    tailwind = true, -- Enable tailwind colors
    -- parsers can contain values used in |user_default_options|
    sass = { enable = false, parsers = { css }, }, -- Enable sass colors
    virtualtext = "●",
  },
  -- all the sub-options of filetypes apply to buftypes
  buftypes = { "*", "!prompt", "!popup" },
}
'''

# [[plugins]]
# repo = 'cohama/lexima.vim'
# on_event = 'InsertEnter'
# hook_add  =  '''
# let g:lexima_map_escape = ''
# let g:lexima_no_default_rules = 1
# '''
# hook_post_source = '''
# source $XDG_CONFIG_HOME/nvim/plugins/lexima.vim
# call SetLeximaAddRule()
# '''

# [[plugins]]
# repo = 'windwp/nvim-autopairs'
# hook_source = '''
# lua require'plugins.autopairs'
# '''

[[plugins]]
repo = 'hrsh7th/nvim-insx'
lua_source = '''
require('insx.preset.standard').setup()
'''

[[plugins]]
repo = 'hrsh7th/nvim-automa'
on_event = 'CursorMoved'
lua_source = '''
local automa = require('automa')
automa.setup({
  mapping = {
    ['.'] = {
      queries = {
        -- wide-range dot-repeat definition.
        automa.query_v1({ '!n(h,j,k,l)+' }),
      }
    },
  }
})
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
on_event = 'CursorMoved'
lua_source = '''
require'plugins.comment'
'''

[[plugins]]
repo = 'bfredl/nvim-miniyank'
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}
hook_add = '''
map p <Plug>(miniyank-autoput)=`]
map P <Plug>(miniyank-autoPut)=`]
let g:miniyank_filename = $XDG_CACHE_HOME."/nvim/.miniyank.mpack"
let g:miniyank_maxitems = 100
'''

# [[plugins]]
# repo = 'ggandor/lightspeed.nvim'
# on_event = 'CursorMoved'
# hook_source = '''
# lua require('plugins.lightspeed')
# nmap <C-j> <plug>Lightspeed_s
# nmap <C-k> <plug>Lightspeed_S
# vmap <C-j> <plug>Lightspeed_s
# vmap <C-k> <plug>Lightspeed_S
# autocmd User LightspeedSxEnter nmap ; <Plug>Lightspeed_;_sx
# autocmd User LightspeedSxEnter nmap , <Plug>Lightspeed_,_sx
# autocmd User LightspeedFtEnter nmap ; <Plug>Lightspeed_;_ft
# autocmd User LightspeedFtEnter nmap , <Plug>Lightspeed_,_ft
# autocmd User LightspeedSxEnter xmap ; <Plug>Lightspeed_;_sx
# autocmd User LightspeedSxEnter xmap , <Plug>Lightspeed_,_sx
# autocmd User LightspeedFtEnter xmap ; <Plug>Lightspeed_;_ft
# autocmd User LightspeedFtEnter xmap , <Plug>Lightspeed_,_ft
# '''

[[plugins]]
repo = 'ggandor/leap.nvim'
depends = ['flit.nvim']
on_event = 'CursorMoved'
lua_source = '''
require('plugins.leap')
'''

[[plugins]]
repo = 'ggandor/flit.nvim'

# バッファでignoreしたりできないので開発進むまでquick-scopeを
# [[plugins]]
# repo = 'jinh0/eyeliner.nvim'
# on_event = 'CursorMoved'
# lua_source = '''
# require('eyeliner').setup ({
#   -- highlight_on_key = true, -- this must be set to true for dimming to work!
#   dim = true,
# })
# require('eyeliner').disable()
# '''

[[plugins]]
repo = 'unblevable/quick-scope'
on_event = 'CursorMoved'
hook_source = '''
let g:qs_hi_priority = 20
let g:qs_ignorecase = 1
let g:qs_filetype_blacklist = [
 \ 'neo-tree', 'help', 'fugitive', 'harpoon', 'DiffviewFiles',
 \ 'DressingSelect', 'mason', 'fugitiveblame',
 \ 'vista', 'qf', 'fzf', 'noice', 'lazygit' ]
'''

# [[plugins]]
# repo = 'mg979/vim-visual-multi'
# rev = 'master'
# on_event = 'CursorMoved'
# hook_add = '''
# let g:VM_cmdheight       = 1
# let g:VM_manual_infoline = 1
# let g:VM_leader          = '<Space>v'
# let g:VM_theme           = 'iceblue'
# let g:VM_set_statusline  = 0
# '''

[[plugins]]
repo = 'smoka7/multicursors.nvim'
on_event = 'CursorMoved'
depends = 'hydra.nvim'
lua_source = '''
local extend = require("multicursors.extend_mode")
require('multicursors').setup {
  hint_config = false,
  normal_keys = {
    -- to change default lhs of key mapping change the key
    ["j"] = {
      method = function()
        vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('j', true, true, true), 'n', false)
      end,
      opts = {}
    },
    ["k"] = {
      method = function()
        vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('k', true, true, true), 'n', false)
      end,
      opts = {}
    },
  }
}
vim.keymap.set('n', '<C-n>', '<Cmd>MCstart<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<Space>vc', '<Cmd>MCunderCursor<CR>', { noremap = true, silent = true })
vim.keymap.set('x', '<C-n>', '<Cmd>MCvisual<CR>', { noremap = true, silent = true })
'''

[[plugins]]
repo = 'xiyaowong/accelerated-jk.nvim'
on_event = 'CursorMoved'
hook_source = '''
 lua require('accelerated-jk').setup {acceleration_table = {35,97,141,212,314,414,514,614}}
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
on_cmd = [
  'HopWordAC', 'HopWordBC', 'HopLineStart',
  'HopChar1AC', 'HopChar1BC', 'HopChar2'
]
hook_add = '''
nmap s <Nop>
xmap s <Nop>
nnoremap <silent>sj <cmd>HopWordAC<CR>
nnoremap <silent>sk <cmd>HopWordBC<CR>
nnoremap <silent>sl <cmd>HopLineStart<CR>
nnoremap <silent>sf <cmd>HopChar1AC<CR>
nnoremap <silent>sF <cmd>HopChar1BC<CR>
nnoremap <silent>ss <cmd>HopChar2<CR>
'''
hook_source = '''
lua require'hop'.setup()
'''

[[plugins]]
repo = 'haya14busa/is.vim'
on_event = 'CursorMoved'

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_event = 'CursorMoved'
hook_add = '''
nmap <silent>*   <Plug>(is-nohl-1)<Plug>(asterisk-z*)
nmap <silent>g*  <Plug>(is-nohl-1)<Plug>(asterisk-gz*)
nmap <silent>#   <Plug>(is-nohl-1)<Plug>(asterisk-z#)
nmap <silent>g#  <Plug>(is-nohl-1)<Plug>(asterisk-gz#)
vmap <silent>*   <Plug>(is-nohl-1)<Plug>(asterisk-z*)
vmap <silent>g*  <Plug>(is-nohl-1)<Plug>(asterisk-gz*)
vmap <silent>#   <Plug>(is-nohl-1)<Plug>(asterisk-z#)
vmap <silent>g#  <Plug>(is-nohl-1)<Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_event = 'CursorMoved'
hook_add = '''
map J <Plug>(edgemotion-j)
map K <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'rhysd/migemo-search.vim'
on_event = 'CmdlineEnter'
hook_source = '''
if executable('cmigemo')
  cnoremap <expr><C-Space> migemosearch#replace_search_word()."\<CR>"
endif
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}

[[plugins]]
repo = 'kana/vim-textobj-user'
depends = [
  'vim-textobj-entire',     'vim-textobj-indent',      'vim-textobj-php',
  'vim-textobj-line',       'vim-textobj-syntax',      'vim-textobj-comment',
  'vim-textobj-between',    'vim-textobj-from_regexp', 'vim-textobj-chunk',
  'textobj-mbboundary.vim', 'vim-textobj-forward'
]
on_event = 'CursorMoved'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'thinca/vim-textobj-between'
hook_add = '''
let g:textobj_between_no_default_key_mappings = 1
xmap iF <Plug>(textobj-between-i)
omap iF <Plug>(textobj-between-i)
xmap aF <Plug>(textobj-between-a)
omap aF <Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'

[[plugins]]
repo = 'glts/vim-textobj-comment'
hook_add = '''
let g:textobj_comment_no_default_key_mappings = 1
xmap a/ <Plug>(textobj-comment-a)
omap a/ <Plug>(textobj-comment-a)
xmap i/ <Plug>(textobj-comment-i)
omap i/ <Plug>(textobj-comment-i)
xmap a? <Plug>(textobj-comment-big-a)
omap a? <Plug>(textobj-comment-big-a)
'''

[[plugins]]
repo = 'Chun-Yang/vim-textobj-chunk'

[[plugins]]
repo = 'aikawa9376/vim-textobj-php'

[[plugins]]
repo = 'aikawa9376/vim-textobj-forward'

[[plugins]]
repo = 'deton/textobj-mbboundary.vim'
hook_add = '''
let g:mbboundary_no_default_key_mappings = 1
omap <silent> am <Plug>MBBoundaryTextObjA
omap <silent> im <Plug>MBBoundaryTextObjI
xmap <silent> am <Plug>MBBoundaryTextObjVA
xmap <silent> im <Plug>MBBoundaryTextObjVI
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
hook_add = '''
" 英数字 + _ を対象とした textobj
omap <expr> i<C-w> textobj#from_regexp#mapexpr('[0-9A-Za-z_.-]\+')
omap <expr> a<C-w> textobj#from_regexp#mapexpr('[0-9A-Za-z_:.$-]\+')
xmap <expr> i<C-w> textobj#from_regexp#mapexpr('[0-9A-Za-z_.-]\+')
xmap <expr> a<C-w> textobj#from_regexp#mapexpr('[0-9A-Za-z_:.$-]\+')
" 英数字のみを対象とした textobj
omap <expr> i<M-w> textobj#from_regexp#mapexpr('[A-Za-z0-9]\+')
xmap <expr> i<M-w> textobj#from_regexp#mapexpr('[A-Za-z0-9]\+')
" 左辺
omap i<C-h> <Plug>(textobj-left-value)
xmap i<C-h> <Plug>(textobj-left-value)
omap <expr>  <Plug>(textobj-left-value)
  \ textobj#from_regexp#mapexpr('^.\{-}\zs\k\+\ze\s*=.*$')
xmap <expr>  <Plug>(textobj-left-value)
  \ textobj#from_regexp#mapexpr('^.\{-}\zs\k\+\ze\s*=.*$')
" 右辺
omap i<C-l> <Plug>(textobj-right-value)
xmap i<C-l> <Plug>(textobj-right-value)
omap <expr> <Plug>(textobj-right-value)
  \ textobj#from_regexp#mapexpr('^.\{-}=\s*\zs.*$')
xmap <expr> <Plug>(textobj-right-value)
  \ textobj#from_regexp#mapexpr('^.\{-}=\s*\zs.*$')
'''

[[plugins]]
repo = 'kana/vim-operator-user'
depends = [
  'vim-operator-replace', 'vim-operator-sort'
]
on_event = 'CursorMoved'

[[plugins]]
repo = 'aikawa9376/vim-operator-replace'
hook_add = '''
nmap <Leader>r mv<plug>(operator-replace)
nmap yr mv<plug>(operator-replace_r)
nmap <Leader>R mv<plug>(operator-replace)$
nmap cr mv<plug>(operator-replace_R)
xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-smartchr'
on_event = 'InsertEnter'
hook_add = '''
inoremap <expr> + smartchr#loop('+', '++', ' + ', ' ++ ')
inoremap <expr> - smartchr#loop('-', '--', ' - ', ' -- ')
inoremap <expr> * smartchr#loop('*', '**', ' * ', ' ** ')
inoremap <expr> / smartchr#loop('/', '//', ' / ', ' // ')
inoremap <expr> & smartchr#loop('&', '&&', ' & ', ' && ')
inoremap <expr> % smartchr#loop('%', '%%', ' % ', ' %% ')
inoremap <expr> > smartchr#loop('>', '>>', ' > ', ' >> ')
inoremap <expr> < smartchr#loop('<', '<<', ' < ', ' <= ')
inoremap <expr> , smartchr#loop(',', ', ')
" =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
" 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
inoremap <expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
  \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
  \ : smartchr#loop('=', ' = ', ' == ')
" 下記の文字は連続して現れることがまれなので、二回続けて入力したらいろいろする
inoremap <expr> ; smartchr#loop(';', '$', '@')
inoremap <expr> ? smartchr#loop('?', '!', '%', '=')
" 「->」は入力しづらいので、..で置換え
inoremap <expr> . smartchr#loop('.', '->', '=>')
" if文直後の(は自動で間に空白を入れる
inoremap <expr> ( search('\<\if\%#', 'bcn')? ' (': '('
'''
[plugins.ftplugin]
lua = '''
inoremap <expr> . smartchr#loop('.', '..', '->', '=>')
'''
javascript = '''
inoremap <expr> . smartchr#loop('.', '..', '->', '=>')
'''
typescript = '''
inoremap <expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
  \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
  \ : smartchr#loop('=', ' = ', ' == ', ' === ', ' !== ')
'''
typescriptreact = '''
inoremap <expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
  \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
  \ : smartchr#loop('=', ' = ', ' == ', ' === ', ' !== ')
'''

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add = '''
nmap <Leader>to mv<plug>(operator-sort)
xmap <Leader>to mv<Plug>(operator-sort)
'''

# [[plugins]]
# repo = 'kana/vim-submode'
# on_event = 'VimEnter'
# hook_source = '''
# " set lazydrawでカーソルが飛ぶ
# let g:submode_timeoutlen = 5000
# let g:submode_keep_leaving_key = 1
#
# call submode#enter_with('linterbrace', 'n', 's', '[a', "<cmd>lua vim.diagnostic.goto_prev({float = false})<CR><cmd>lua vim.diagnostic.open_float(nil, { border = 'rounded', scope = 'cursor',  focusable = false })<CR>")
# call submode#enter_with('linterbrace', 'n', 's', ']a', "<cmd>lua vim.diagnostic.goto_next({float = false})<CR><cmd>lua vim.diagnostic.open_float(nil, { border = 'rounded', scope = 'cursor',  focusable = false })<CR>")
# call submode#map('linterbrace', 'n', 's', '[', "<cmd>lua vim.diagnostic.goto_prev({float = false})<CR><cmd>lua vim.diagnostic.open_float(nil, { border = 'rounded', scope = 'cursor',  focusable = false })<CR>")
# call submode#map('linterbrace', 'n', 's', ']', "<cmd>lua vim.diagnostic.goto_next({float = false})<CR><cmd>lua vim.diagnostic.open_float(nil, { border = 'rounded', scope = 'cursor',  focusable = false })<CR>")
# '''

[[plugins]]
# repo = 'nvimtools/hydra.nvim'
repo = 'Cathyprime/hydra.nvim'
on_event = 'CursorMoved'
lua_source = '''
require'plugins.hydra'
'''

# [[plugins]]
# repo = 'tpope/vim-surround'
# on_event = 'CursorMoved'
# hook_add = '''
# let g:surround_{char2nr("P")} = "<?php \r ?>"
# let g:surround_{char2nr("H")} = "<!-- \r -->"
# '''

[[plugins]]
repo = 'kylechui/nvim-surround'
on_event = 'CursorMoved'
lua_source = '''
require("nvim-surround").setup({
  surrounds = {
    [")"] = {
      change = {
          replacement = { "a(", ")a" },
      },
    },
    ["}"] = {
      change = {
          replacement = { "{", "}" },
      },
    },
  },
  aliases = {
    ["b"] = { ")", "}", "]", ">" },
    ["q"] = { '"', "'", "`" },
    ["s"] = { "}", "]", ")", ">", '"', "'", "`" },
  },
})
'''

# update keybindings for nvim-automa
# [[plugins]]
# repo = 'tpope/vim-repeat'
# on_event = 'CursorMoved'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = 'CursorMoved'

[[plugins]]
repo = 'matze/vim-move'
on_event = 'CursorMoved'
hook_add = '''
let g:move_map_keys = 0
xmap <M-J> <Plug>MoveBlockDown
xmap <M-K> <Plug>MoveBlockUp
xmap <M-H> <Plug>MoveBlockLeft
xmap <M-L> <Plug>MoveBlockRight
nmap <M-J> <Plug>MoveLineDown
nmap <M-K> <Plug>MoveLineUp
nmap <M-H> <Plug>MoveCharLeft
nmap <M-L> <Plug>MoveCharRight
'''

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'CursorMoved'
hook_add = '''
nmap <Space><Space> %
xmap <Space><Space> %
nmap <C-Space> <Plug>(matchup-z%)
let g:matchup_matchparen_offscreen = {'method': 'status_manual'}
'''

[[plugins]]
repo = 'wellle/targets.vim'
on_event = 'CursorMoved'
hook_source = '''
augroup targets_settind
autocmd!
autocmd User targets#mappings#user call targets#mappings#extend({
  \ 'b': {'pair': [
  \      {'o':'(', 'c':')'}, {'o':'[', 'c':']'},
  \      {'o':'{', 'c':'}'}, {'o':'<', 'c':'>'}, {'o':'>', 'c':'<'}
  \ ]},
  \ 'q': {'quote': [{'d':"'"}, {'d':'"'}, {'d':'`'}]},
  \ })
augroup END
'''

[[plugins]]
repo = 'aikawa9376/vim-auto-cursorline'
on_event = 'CursorMoved'
hook_add = '''
let g:auto_cursorline_wait_ms = 500
augroup cursorline-coc-setting
  autocmd!
  autocmd FileType list let g:auto_cursorline_disable = 1
augroup END
function! EnhanCursor()
  let g:auto_cursorline_disable = 0
  bd
endfunction
'''

[[plugins]]
repo = 'Wansmer/treesj'
on_cmd = ['Split']
lua_source = '''
local tsj = require('treesj')

tsj.setup({
  ---@type boolean Use default keymaps (<space>m - toggle, <space>j - join, <space>s - split)
  use_default_keymaps = false,
  ---@type boolean Node with syntax error will not be formatted
  check_syntax_error = true,
  ---If line after join will be longer than max value,
  ---@type number If line after join will be longer than max value, node will not be formatted
  max_join_length = 120,
  ---Cursor behavior:
  ---hold - cursor follows the node/place on which it was called
  ---start - cursor jumps to the first symbol of the node being formatted
  ---end - cursor jumps to the last symbol of the node being formatted
  ---@type 'hold'|'start'|'end'
  cursor_behavior = 'hold',
  ---@type boolean Notify about possible problems or not
  notify = true,
  ---@type boolean Use `dot` for repeat action
  dot_repeat = true,
  ---@type nil|function Callback for treesj error handler. func (err_text, level, ...other_text)
  on_error = nil,
  ---@type table Presets for languages
  -- langs = {}, -- See the default presets in lua/treesj/langs
})
vim.api.nvim_create_user_command('Split', tsj.toggle, {})
'''

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = ['Goyo']

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'danymat/neogen'
on_cmd = ['Neogen']
lua_source = '''
require('neogen').setup {
  snippet_engine = 'luasnip',
  languages = {
    lua = {
        template = {
            annotation_convention = "emmylua"
        }
    },
    typescriptreact = {
        template = {
            annotation_convention = "tsdoc"
        }
    },
  }
}
'''

# list-----------------------------------

# [[plugins]]
# repo = 'liuchengxu/vista.vim'
# on_cmd = ['Vista!!']
# hook_add = '''
# nnoremap <silent> <Leader>o  <cmd>Vista!!<CR>
# nnoremap <silent> <Leader>c/ <cmd>Vista finder<CR>
# let g:vista_stay_on_open         = 0
# let g:vista_fzf_preview          = ['right:50%']
# let g:vista_icon_indent          = ["", " "]
# let g:vista_echo_cursor_strategy = "floating_win"
# let g:vista_ctags_cmd = {
#   \ "php": "ctags --format=2 --excmd=pattern --fields=nksSaf --sort=no --file-scope=yes --append=no -f-"
#   \ }
# let g:vista#renderer#icons = {
#   \  "function": "\uf794 ",
#   \  "variable": "\uf71b ",
#   \ }
# '''

# [[plugins]]
# repo = 'shougo/defx.nvim'
# depends = ['defx-icons', 'defx-git']
# on_cmd = ['Defx']
# hook_add = '''
# let g:defx_trak_directory = 1
# nmap <silent><Space>n <cmd>Defx -search-recursive=`expand('%:p')`<CR>
#
# autocmd MyAutoCmd FileType defx call s:defx_my_settings()
# function! s:defx_my_settings() abort
#   " Define mappings
#   nnoremap <silent><buffer><expr><nowait> <CR>
#   \ defx#do_action('drop') . '\<C-w>w'
#   nnoremap <silent><buffer><expr><nowait> c
#   \ defx#do_action('copy')
#   nnoremap <silent><buffer><expr><nowait> m
#   \ defx#do_action('move')
#   nnoremap <silent><buffer><expr><nowait> p
#   \ defx#do_action('paste')
#   nnoremap <silent><buffer><expr><nowait> E
#   \ defx#do_action('open', 'vsplit')
#   nnoremap <silent><buffer><expr><nowait> P
#   \ defx#do_action('open', 'pedit')
#   nnoremap <silent><buffer><expr><nowait> o
#   \ defx#do_action('open_or_close_tree')
#   nnoremap <silent><buffer><expr><nowait> K
#   \ defx#do_action('new_directory')
#   nnoremap <silent><buffer><expr><nowait> N
#   \ defx#do_action('new_file')
#   nnoremap <silent><buffer><expr><nowait> M
#   \ defx#do_action('new_multiple_files')
#   nnoremap <silent><buffer><expr><nowait> C
#   \ defx#do_action('toggle_columns', 'size:time')
#   nnoremap <silent><buffer><expr><nowait> S
#   \ defx#do_action('toggle_sort', 'time')
#   nnoremap <silent><buffer><expr><nowait> d
#   \ defx#do_action('remove')
#   nnoremap <silent><buffer><expr><nowait> r
#   \ defx#do_action('rename')
#   nnoremap <silent><buffer><expr><nowait> !
#   \ defx#do_action('execute_command')
#   nnoremap <silent><buffer><expr><nowait> x
#   \ defx#do_action('execute_system')
#   nnoremap <silent><buffer><expr> P
#   \ defx#do_action('preview')
#   nnoremap <silent><buffer><expr><nowait> yy
#   \ defx#do_action('yank_path')
#   nnoremap <silent><buffer><expr><nowait> yY
#   \ defx#do_action('yank_path', ':t')
#   nnoremap <silent><buffer><expr><nowait> .
#   \ defx#do_action('toggle_ignored_files')
#   nnoremap <silent><buffer><expr><nowait> ;
#   \ defx#do_action('repeat')
#   nnoremap <silent><buffer><expr><nowait> ~
#   \ defx#do_action('cd')
#   nnoremap <silent><buffer><expr><nowait> q
#   \ defx#do_action('quit')
#   nnoremap <silent><buffer><expr><nowait> <Tab>
#   \ defx#do_action('toggle_select') . 'j'
#   nnoremap <silent><buffer><expr><nowait> *
#   \ defx#do_action('toggle_select_all')
#   nnoremap <silent><buffer><expr><nowait> j
#   \ line('.') == line('$') ? 'gg' : 'j'
#   nnoremap <silent><buffer><expr><nowait> k
#   \ line('.') == 1 ? 'G' : 'k'
#   nnoremap <silent><buffer><expr><nowait> <C-l>
#   \ defx#do_action('redraw')
#   nnoremap <silent><buffer><expr><nowait> <C-g>
#   \ defx#do_action('print')
#   nnoremap <silent><buffer><expr><nowait> <C-n>
#   \ ':<C-u>Defx -buffer-name=temp -split=split<CR>'
#   nnoremap <silent><buffer><expr><nowait> <Space>n
#   \ ':<C-u>Defx -close<CR>'
# endfunction
#
# augroup user_plugin_defx
#   autocmd!
#   autocmd CursorHold * SyncDefx
#   autocmd FileType defx setlocal nonumber
# augroup END
#
# command! SyncDefx :call s:check_and_search_defx()
# function! s:check_and_search_defx()
#   if bufwinnr('defx') == 1 && &filetype != 'defx' && g:defx_trak_directory == 1
#     Defx -no-focus -no-toggle -search-recursive=`expand('%:p')`
#   endif
# endfunction
# '''
# hook_source = '''
# call defx#custom#option('_', {
#     \ 'columns': 'indent:git:icons:filename:type',
#     \ 'direction': 'topleft',
#     \ 'split': 'vertical',
#     \ 'floating_preview': 1,
#     \ 'show_ignored_files': 1,
#     \ 'winwidth': 30,
#     \ 'toggle': 1,
#     \ 'resume': 1,
#     \ })
# call defx#custom#column('git', 'column_length', 2)
# '''
#
# [[plugins]]
# repo = 'kristijanhusak/defx-icons'
# hook_add = '''
# let g:defx_icons_column_length           = 2
# let g:defx_icons_enable_syntax_highlight = 1
# '''
#
# [[plugins]]
# repo = 'kristijanhusak/defx-git'

# [[plugins]]
# repo = 'kyazdani42/nvim-tree.lua'
# on_event = 'VimEnter'
# rev = 'nightly'
# depends = ['nvim-web-devicons']
# hook_source = '''
# nmap <silent><Space>n <cmd>NvimTreeFindFileToggle<CR>
# lua << EOF
# require("nvim-tree").setup{
#   renderer = {
#     icons = {
#       git_placement = 'after',
#       padding = '',
#       show = {
#         folder_arrow = false,
#       }
#     }
#   }
# }
# EOF
# '''

[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
# rev = '245cf1e68840defcc75a16297740f6203f5a045d'
on_cmd = 'Neotree'
depends = ['nui.nvim']
hook_add = '''
nnoremap <silent><space>n <Cmd>Neotree reveal toggle<CR>
'''
lua_source = '''
require("plugins.neo-tree")
'''

[[plugins]]
repo = 'LeafCage/qutefinger.vim'
on_map = {n = '<Plug>'}
hook_add = '''
nmap Qz <Plug>(qutefinger-toggle-mode)
nmap Qp <Plug>(qutefinger-older)
nmap Qn <Plug>(qutefinger-newer)
nmap Q  <Plug>(qutefinger-toggle-win)
nmap QQ <Plug>(qutefinger-toggle-win)
'''

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_event = 'CursorMoved'
lua_source = '''
require'plugins.bqf'
'''

[[plugins]]
repo = 'junegunn/fzf'
depends = [
  'fzf.vim',
  'vim-bookmarks',
  'fzf-git.vim',
  'fzf-lua',
  'render-markdown.nvim'
]
path = '~/.config/fzf'
merged = 0
on_event = 'CursorHold'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
source $XDG_CONFIG_HOME/nvim/plugins/fzf.vim
'''

[[plugins]]
repo = 'ibhagwan/fzf-lua'
lua_source = '''
require'plugins.fzf-lua'
'''

[[plugins]]
repo = 'MeanderingProgrammer/render-markdown.nvim'

[[plugins]]
repo = 'gfanto/fzf-lsp.nvim'

[[plugins]]
repo = 'aikawa9376/fzf-git.vim'

[[plugins]]
repo = 'aikawa9376/vim-bookmarks'
rev = 'fzf'
hook_add = '''
let g:bookmark_prefer_fzf = 1
let g:bookmark_auto_save_file = $XDG_CACHE_HOME.'/nvim/.vim-bookmarks'
nmap ]B <Plug>BookmarkNext
nmap [B <Plug>BookmarkPrev
nmap <Leader>mm  <Plug>BookmarkToggle
nmap <Leader>mi  <Plug>BookmarkAnnotate
nmap <Leader>ma  <Plug>BookmarkShowAll
nmap <Leader>mc  <Plug>BookmarkClear
nmap <Leader>mx  <Plug>BookmarkClearAll
nmap <Leader>mkk <Plug>BookmarkMoveUp
nmap <Leader>mjj <Plug>BookmarkMoveDown
nmap <Leader>mg  <Plug>BookmarkMoveToLine
'''

[[plugins]]
repo = 'aikawa9376/neomru.vim'
rev = 'mrw'
on_event = 'VimEnter'
hook_add = '''
" let g:neomru#file_mru_limit = 5000
'''

# mundoのほうが好きだけどしょうがない
[[plugins]]
repo = 'jiaoshijie/undotree'
on_event = ['CursorHold']
depends = 'plenary.nvim'
lua_source = '''
require('undotree').setup({
  float_diff = false,  -- using float window previews diff, set this `true` will disable layout option
  layout = "left_left_bottom", -- "left_bottom", "left_left_bottom"
  position = "left", -- "right", "bottom"
  ignore_filetype = { 'undotree', 'undotreeDiff', 'qf', 'TelescopePrompt', 'spectre_panel', 'tsplayground' },
  window = {
    winblend = 30,
    width = 30,
  },
  keymaps = {
    ['j'] = "move_next",
    ['k'] = "move_prev",
    ['gj'] = "move2parent",
    ['J'] = "move_change_next",
    ['K'] = "move_change_prev",
    ['<cr>'] = "action_enter",
    ['p'] = "enter_diffbuf",
    ['q'] = "quit",
  },
})
vim.keymap.set('n', '<leader>u', require('undotree').toggle, { noremap = true, silent = true })
'''

# [[plugins]]
# repo = 'nvim-pack/nvim-spectre'
# on_lua = 'spectre'
# lua_source = '''
# require('spectre').setup({ line_sep_start = '', result_padding = '', line_sep  = '',})
# '''
# hook_add = '''
# " search current word
# nnoremap <silent><leader>rr <cmd>lua require('spectre').open_visual({select_word=true})<CR>
# xnoremap <silent><leader>rr <cmd>lua require('spectre').open_visual()<CR>
# " search in current file
# nnoremap <silent><leader>rR viw<cmd>lua require('spectre').open_file_search()<cr>
# '''

[[plugins]]
repo = 'MagicDuck/grug-far.nvim'
on_lua = 'grug-far'
on_event = 'CursorMoved'
lua_source = '''
require('grug-far').setup({
  engines = {
    ripgrep = {
      extraArgs = '--hidden',
    }
  },
  keymaps = {
    replace = { n = '<localleader>r' },
    qflist = { n = '<localleader>q' },
    syncLocations = { n = '<localleader>s' },
    syncLine = { n = '<localleader>l' },
    close = { n = 'q' },
    historyOpen = { n = '<localleader>t' },
    historyAdd = { n = '<localleader>a' },
    refresh = { n = '<localleader>f' },
    openLocation = { n = '<localleader>o' },
    openNextLocation = { n = '<down>' },
    openPrevLocation = { n = '<up>' },
    gotoLocation = { n = '<enter>' },
    pickHistoryEntry = { n = '<enter>' },
    abort = { n = '<localleader>b' },
    help = { n = 'g?' },
    toggleShowCommand = { n = '<localleader>p' },
    swapEngine = { n = '<localleader>e' },
    previewLocation = { n = '<localleader>i' },
    swapReplacementInterpreter = { n = '<localleader>x' },
  },
});

vim.api.nvim_set_keymap("n", "<leader>rr", "<cmd>lua require('grug-far').open({ transient = true })<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<leader>rR", "<cmd>lua require('grug-far').open({ transient = true, prefills = { search = vim.fn.expand('<cword>') } })<cr>", { silent = true })
vim.api.nvim_set_keymap("x", "<leader>rr", "<cmd>lua require('grug-far').with_visual_selection({ transient = true })<cr>", { silent = true })
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = ['JunkfileOpen']
hook_source = '''
" depends vim rooter
if exists('*FindRootDirectory') && FindRootDirectory() != ''
  let s:dir = FindRootDirectory()
  let s:dir = split(s:dir, '/')
  let workdir = s:dir[len(s:dir) - 1] . '/'
else
  let workdir = ''
endif
let g:junkfile#directory = $XDG_CACHE_HOME.'/junkfile/'.workdir
'''

[[plugins]]
repo = 'tpope/vim-dadbod'

[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'
depends = ['vim-dadbod']
on_cmd = ['DBUI']
hook_add = '''
let g:db_ui_use_nerd_fonts = 1
let g:db_ui_win_position = 'right'
function! s:delete_hide_buffer()
  let ignorelist = ["dbui", "dbout", "sql"]
  let list = filter(range(1, bufnr("$")), "bufexists(v:val)")
    for num in list
      if match(ignorelist, getbufvar(num, '&filetype')) >= 0 && bufexists(num)
        execute "bw! ".num
      endif
    endfor
endfunction

command! DBUIDelete :call s:delete_hide_buffer()
'''

[[plugins]]
repo = 'aserowy/tmux.nvim'
on_event = 'BufRead'
lua_source = '''
require("tmux").setup({
    copy_sync = {
        enable = false,
    },
    navigation = {
        enable_default_keybindings = false,
    },
    resize = {
        enable_default_keybindings = false,
        resize_step_x = 3,
        resize_step_y = 3,
    }
})
vim.api.nvim_set_keymap("n", "<C-w>h", "<cmd>lua require('tmux').move_left()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>j", "<cmd>lua require('tmux').move_bottom()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>k", "<cmd>lua require('tmux').move_top()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>l", "<cmd>lua require('tmux').move_right()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w><", "<cmd>lua require('tmux').resize_left()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>+", "<cmd>lua require('tmux').resize_bottom()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>-", "<cmd>lua require('tmux').resize_top()<cr>", { silent = true })
vim.api.nvim_set_keymap("n", "<C-w>>", "<cmd>lua require('tmux').resize_right()<cr>", { silent = true })
'''

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
on_event = 'CursorMoved'
hook_add = '''
let g:gutentags_project_root = [
  \ '.root', '.svn', '.git', '.project', '.vim.local',
  \ 'package.json', 'composer.json'
  \ ]
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
  silent! call mkdir(s:vim_tags, 'p')
endif
'''

# git -----------------------------------

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'CursorMoved'
hook_add = '''
nmap <silent>gm <cmd>GitGutterPreviewHunk<CR>
nmap <silent><Leader>gh <cmd>GitGutterStageHunk<CR>
nmap <silent><Leader>gu <cmd>GitGutterUndoHunk<CR>
nmap zhf <cmd>GitGutterFold<CR>
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)
let g:gitgutter_sign_added              = "▕"
let g:gitgutter_sign_modified           = "▕"
let g:gitgutter_sign_removed            = "▕"
let g:gitgutter_sign_modified_removed   = "▕"
let g:gitgutter_sign_removed_first_line = "▕"
let g:gitgutter_grep_command            = 'rg --hidden --follow --glob "!.git/*"'
let g:gitgutter_diff_args               = '-w'
let g:gitgutter_preview_win_floating    = 1
let g:gitgutter_highlight_linenrs       = 0
let g:gitgutter_sign_priority           = 5
'''
hook_post_source = '''
GitGutterEnable
'''

# [[plugins]]
# repo = 'lewis6991/gitsigns.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# lua << EOF
# require('gitsigns').setup {
#   signs = {
#     add          = {hl = 'GitSignsAdd'   , text = '▏', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
#     change       = {hl = 'GitSignsChange', text = '▏', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
#     delete       = {hl = 'GitSignsDelete', text = '▏', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
#     topdelete    = {hl = 'GitSignsDelete', text = '▏', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
#     changedelete = {hl = 'GitSignsChange', text = '▏', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
#   },
# }
# EOF
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [
  "Git", "Gdiff", "Gwrite", "Gdiffsplit",
  "GitAddCommit", "GitAddAmend"
]
hook_add = '''
nmap <silent> <Leader>gs <cmd>Git<CR>
nmap <silent> <Leader>gd <cmd>Gdiffsplit<CR>
nmap <silent> <Leader>ga <cmd>Gwrite<CR>
nmap <silent> <Leader>gb <cmd>Git blame -w --date=format:'%Y-%m-%d %H:%M'<CR>
nmap <silent> <Leader>gp <cmd>Git! push<CR>
nmap <silent> <Leader>gr <cmd>Git! rm --cached %<CR>
nmap <silent> <Leader>gm <cmd>Git! commit -m 'update'<CR>
nmap <silent> <Leader>gM <cmd>GitAddCommit update<CR>
nmap <silent> <Leader>gU <cmd>GitAddAmend<Space>
command! -nargs=* GitAddCommit silent execute('
  \ !git add -u && git commit -m ' . shellescape(<q-args>)) . '&'
command! -nargs=* GitAddAmend silent execute('
  \ !git add -u && git commit --amend -m ' . shellescape(<q-args>)) . '&'
'''

# [[plugins]]
# repo = 'FabijanZulj/blame.nvim'
# on_event = 'CursorMoved'
# lua_source = '''
# require'blame'.setup({
#   date_format = "%Y/%m/%d %H:%M:%S",
#   blame_options = nil,
#   mappings = {
#       commit_info = "i",
#       stack_push = "p",
#       stack_pop = "<S-p>",
#       show_commit = "<CR>",
#       close = { "<esc>", "q" },
#   }
# })
# '''

[[plugins]]
repo = 'sindrets/diffview.nvim'
on_cmd = ['DiffviewOpen', 'DiffviewFileHistory']
hook_add = '''
nnoremap <Leader>gH <cmd>DiffviewFileHistory%<CR>
'''
hook_source = '''
lua require'plugins.diffview'
'''

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
on_lua = ['lazygit.nvim']
hook_add = '''
nmap <silent><Leader>gl <cmd>LazyGit<CR>
'''

# [[plugins]]
# repo = 'cohama/agit.vim'
# on_cmd = ['Agit']
# hook_add = '''
# nmap <silent><Leader>gl <cmd>Agit<CR>
# '''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = ['<Plug>(git-messenger)']
hook_add = '''
nmap g<space> <Plug>(git-messenger)
let g:git_messenger_floating_win_opts = { 'border': 'single' }
'''

# status line ---------------------------
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_source = '''
require'plugins.lualine'
'''

[[plugins]]
repo = 'akinsho/bufferline.nvim'
on_event = 'CursorHold'
lua_source = '''
require'plugins.bufferline'
'''

[[plugins]]
repo = 'markonm/traces.vim'
on_event = 'CmdlineEnter'
hook_source = '''
let g:traces_abolish_integration = 1
'''

# util ----------------------------------
[[plugins]]
repo = 'aikawa9376/myutil.vim'
on_event = 'CursorMoved'
hook_add = '''
set foldtext=myutil#custom_fold_text()
nmap <silent> gl <cmd>call myutil#hl_text_toggle()<CR>
nmap <silent>]p <cmd>call myutil#yank_line('j')<CR>=`]^
nmap <silent>[p <cmd>call myutil#yank_line('k')<CR>=`]^
nmap <silent><M-p> <cmd>call myutil#yank_remove_line()<CR>=`]^
nmap <silent><C-t> <cmd>call myutil#yank_text_toggle()<CR>
nmap <Leader>, <cmd>call myutil#reload_vimrc()<CR>
xmap <silent><F1> <cmd>call myutil#help_override()<CR>
nmap <silent><F1> <cmd>call myutil#help_override()<CR>
xmap <silent> gK <cmd>call myutil#google_search()<CR>
nmap <silent> gK <cmd>call myutil#google_search()<CR>
xmap <silent> gg <cmd>call myutil#google_open()<CR>
nnoremap <silent> <Plug>(my-switch)y <cmd>call myutil#toggle_syntax()<CR>
nnoremap <silent> <Plug>(my-switch)n <cmd>call myutil#toggle_relativenumber()<CR>
nnoremap <silent> dd <cmd>call myutil#remove_line_brank(v:count1)<cr>
nnoremap <silent> dD <cmd>call myutil#remove_line_brank_all(v:count1)<cr>
nnoremap <expr> i myutil#indent_with_i("m`mv")
nnoremap <silent>gJ <cmd>call myutil#join_space_less()<CR>
xnoremap <silent>@ <cmd>call myutil#execute_macro_visual_range()<CR>
cnoremap <expr> <C-U> myutil#ctrl_u()
cnoremap <expr> <SID>(ctrl_w_before) myutil#ctrl_w_before()
cnoremap <expr> <SID>(ctrl_w_after) myutil#ctrl_w_after()
cmap <script> <C-W> <SID>(ctrl_w_before)<SID>(ctrl_w_after)
'''

# [[plugins]]
# repo = 'gelguy/wilder.nvim'
# on_event = 'VimEnter'
# hook_source = '''
# call wilder#enable_cmdline_enter()
# set wildcharm=<Tab>
#
# " conflict incsearch
# autocmd MyAutoCmd User IncSearchEnter cunmap <C-n>
# autocmd MyAutoCmd User IncSearchEnter cunmap <C-p>
# autocmd MyAutoCmd User IncSearchLeave cmap <expr> <C-p> wilder#in_context() ? wilder#next() : pumvisible() ? "\<Right>" : "\<C-p>"
# autocmd MyAutoCmd User IncSearchLeave cmap <expr> <C-n> wilder#in_context() ? wilder#previous() : pumvisible() ? "\<Left>" : "\<C-p>"
#
# cmap <expr> <C-p> wilder#in_context() ? wilder#next() : pumvisible() ? "\<Right>" : "\<C-p>"
# cmap <expr> <C-n> wilder#in_context() ? wilder#previous() : pumvisible() ? "\<Left>" : "\<C-p>"
# cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
# cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
#
# call wilder#set_option('modes', [':', '/', '?'])
#
# call wilder#set_option('renderer', wilder#popupmenu_renderer({
#       \ 'highlighter': wilder#query_highlighter(),
#       \ 'winblend': 10,
#       \ 'reverse': 1,
#       \ 'apply_incsearch_fix': v:true,
#       \ 'right': ['', wilder#popupmenu_scrollbar({
#       \     'thumb_char': ' '
#       \   })]
#       \ }))
#
# call wilder#set_option('pipeline', [
#       \   wilder#branch(
#       \     [
#       \       wilder#check({_, x -> empty(x)}),
#       \       wilder#history(),
#       \     ],
#       \     wilder#python_file_finder_pipeline({
#       \       'file_command': ['rg', '--files'],
#       \       'dir_command': ['fd', '-tr'],
#       \       'filters': ['fuzzy_filter', 'difflib_sorter'],
#       \     }),
#       \     wilder#cmdline_pipeline({
#       \       'fuzzy': 2,
#       \       'language': 'python',
#       \       'engine': 're2',
#       \       'sorter': wilder#python_difflib_sorter(),
#       \     }),
#       \     wilder#python_search_pipeline({
#       \       'pattern': 'fuzzy',
#       \     }),
#       \   ),
#       \   wilder#result_draw_devicons(),
#       \ ])
# '''

[[plugins]]
repo = 'vim-scripts/BufOnly.vim'
on_cmd = ['BufOnly']

[[plugins]]
repo = 'moll/vim-bbye'
on_cmd = ['Bdelete', 'Bwipeout']

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_cmd = ['AsyncRun']

[[plugins]]
repo = 'skywind3000/asynctasks.vim'
on_cmd = ['AsyncTask']

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'
on_event = 'CmdlineEnter'

# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'yarn install --frozen-lockfile --production'
# on_ft = [
#   'javascript', 'typescript', 'css', 'less', 'scss',
#   'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'
#   'typescriptreact', 'javascriptreact'
# ]
# hook_add = '''
# let g:prettier#config#single_quote = 'true'
# let g:prettier#config#semi = 'false'
# let g:prettier#config#trailing_comma = 'none'
# let g:prettier#quickfix_enabled = 0
# '''
# hook_source = '''
# augroup prettierDefaults
#   autocmd!
#   autocmd BufWritePre * PrettierAsync
# augroup END
# '''

[[plugins]]
repo = 'monaqa/dial.nvim'
on_event = 'CursorMoved'
lua_source = '''
local augend = require("dial.augend")
require("dial.config").augends:register_group{
  -- default augends used when no group name is specified
  default = {
    augend.integer.alias.decimal, -- nonnegative decimal number (0, 1, 2, 3, ...)
    augend.integer.alias.hex, -- nonnegative hex number  (0x01, 0x1a1f, etc.)
    augend.constant.alias.bool, -- boolean value (true <-> false)
    augend.date.alias["%Y/%m/%d"], -- date (2022/02/18, etc.)
    augend.date.alias["%m/%d/%Y"], -- date (02/19/2022)
    -- augend.date.alias["%m-%d-%Y"], -- date (02-19-2022)
    -- augend.date.alias["%Y-%m-%d"], -- date (02-19-2022)
    augend.date.new({
      pattern = "%m.%d.%Y",
      default_kind = "day",
      only_valid = true,
      word = false,
    }),
    augend.misc.alias.markdown_header,
    augend.constant.alias.ja_weekday,
    augend.constant.alias.ja_weekday_full,
    -- augend.paren.alias.brackets,
    -- augend.paren.alias.quote,
  }
}
vim.keymap.set("n", "<C-a>", function()
    require("dial.map").manipulate("increment", "normal")
end)
vim.keymap.set("n", "<C-x>", function()
    require("dial.map").manipulate("decrement", "normal")
end)
vim.keymap.set("n", "g<C-a>", function()
    require("dial.map").manipulate("increment", "gnormal")
end)
vim.keymap.set("n", "g<C-x>", function()
    require("dial.map").manipulate("decrement", "gnormal")
end)
vim.keymap.set("v", "<C-a>", function()
    require("dial.map").manipulate("increment", "visual")
end)
vim.keymap.set("v", "<C-x>", function()
    require("dial.map").manipulate("decrement", "visual")
end)
vim.keymap.set("v", "g<C-a>", function()
    require("dial.map").manipulate("increment", "gvisual")
end)
vim.keymap.set("v", "g<C-x>", function()
    require("dial.map").manipulate("decrement", "gvisual")
end)
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
on_cmd = 'ToggleTerm'
hook_add = '''
nnoremap <silent><F12> <Cmd>exe v:count1 . "ToggleTerm"<CR><BS>
tnoremap <silent><F12> <Esc><Cmd>exe v:count1 . "ToggleTerm"<CR>
function! TermForceCloseAll() abort
  let term_bufs = filter(range(1, bufnr('$')), 'getbufvar(v:val, "&buftype") == "terminal"')
  for t in term_bufs
    execute "bd! " t
  endfor
endfunction
'''
lua_source = '''
require("toggleterm").setup {
  highlights = {
    Normal = {
      guibg = "#002b36"
    }
  },
  shade_terminals = false
}
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = [
  'nvim-treesitter-textobjects', 'playground', 'rainbow-delimiters.nvim',
  'nvim-ts-context-commentstring', 'nvim-ts-autotag', 'nvim-yati',
  'hlargs.nvim', 'nvim-treehopper', 'vim-tmindent'
]
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
lua_source = '''
require('plugins.treesitter')
'''

[[plugins]]
repo = 'mfussenegger/nvim-treehopper'
lua_source = '''
-- require("tsht").config.ft_to_parser.typescriptreact = "tsx"
'''
hook_source = '''
omap <silent> <space> :<C-U>lua require('tsht').nodes()<CR>
vmap <silent> <space>h :<C-U>lua require('tsht').nodes()<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-refactor'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]]
repo = 'nvim-treesitter/playground'

[[plugins]]
repo = 'HiPhish/rainbow-delimiters.nvim'
lua_source = '''
require('rainbow-delimiters.setup').setup{
  highlight = {
    'RainbowDelimiterBlue',
    'RainbowDelimiterGreen',
    'RainbowDelimiterViolet',
    'RainbowDelimiterYellow',
    'RainbowDelimiterOrange',
    'RainbowDelimiterCyan',
    'RainbowDelimiterRed',
  },
}
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
lua_source = '''
vim.g.skip_ts_context_commentstring_module = true
require('ts_context_commentstring').setup {
  enable_autocmd = false,
}
'''

[[plugins]]
repo = 'windwp/nvim-ts-autotag'

[[plugins]]
repo = 'yioneko/nvim-yati'

[[plugins]]
repo = 'yioneko/vim-tmindent'
lua_source = '''
enables = {
  "lua", "vim", "html", "vue", "javascript",
  "typescript", "typescriptreact", "javascriptreact"
}
require('tmindent').setup({
  enabled = function() return vim.tbl_contains(enables, vim.bo.filetype) end,
  use_treesitter = function() return true end, -- used to detect different langauge region and comments
})
'''

[[plugins]]
repo = 'm-demare/hlargs.nvim'
lua_source = '''
require 'hlargs'.setup({
  hl_priority = 150
})
'''

[[plugins]]
repo = 'kwkarlwang/bufjump.nvim'
on_event = 'CursorMoved'
lua_source = '''
require("bufjump").setup({
    forward_key = "<M-i>",
    backward_key = "<M-o>",
    on_success = nil
})
'''

# [[plugins]]
# repo = 'yamatsum/nvim-cursorline'
# on_event = 'VimEnter'
# hook_source = '''
# lua << EOF
# require('nvim-cursorline').setup {
#   cursorline = {
#     enable = true,
#     timeout = 1000,
#     number = false,
#   },
#   cursorword = {
#     enable = false,
#   }
# }
# EOF
# '''

[[plugins]]
repo = 'linrongbin16/gitlinker.nvim'
on_event = 'CursorMoved'
lua_source = '''
require'plugins.gitlinker'
'''

# php------------------------------------
[[plugins]]
repo = 'captbaritone/better-indent-support-for-php-with-html'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['php', 'blade']

# javascript-----------------------------
[[plugins]]
repo = 'heavenshell/vim-jsdoc'
build = 'make install'
on_ft = ['javascritpt', 'typescriptreact', 'javascriptreact']
hook_source = '''
let g:jsdoc_allow_input_prompt = 0
let g:jsdoc_input_description = 1
let g:jsdoc_param_description_separator = ': '
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_enable_es6 = 1
'''

# rust----------------------------------

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
let g:rustfmt_autosave = 1
'''
