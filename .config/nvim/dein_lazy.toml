# shougo---------------------------------

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = [
'neosnippet', 'context_filetype.vim', 'neco-syntax',
'echodoc.vim', 'neoinclude.vim', 'FastFold', 'neopairs.vim'
]
hook_source = '''
" deoplete setup
let g:deoplete#enable_at_startup = 1

let s:deoplete_custom_option = {
      \ 'auto_complete': v:true,
      \ 'auto_complete_delay': 5,
      \ 'auto_refresh_delay': 30,
      \ 'camel_case': v:false,
      \ 'ignore_case': v:true,
      \ 'max_list': 100,
      \ 'min_pattern_length': 1,
      \ 'num_processes': 10,
      \ 'on_insert_enter': v:true,
      \ 'on_text_changed_i': v:true,
      \ 'refresh_always': v:false,
      \ 'skip_chars': ['(', ')'],
      \ 'smart_case': v:true,
      \ }
call deoplete#custom#option(s:deoplete_custom_option)

" call deoplete#custom#source('tag', 'min_pattern_length', 2)
call deoplete#custom#source('padawan', 'mark', '[P]')

" 戻れてもいいかもしれない
autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers
'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_event = 'InsertEnter'
on_ft = ['snippet']
hook_source = '''
" Snippet key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-Space> <Plug>(neosnippet_expand_or_jump)
smap <C-Space> <Plug>(neosnippet_expand_or_jump)
xmap <C-Space> <Plug>(neosnippet_expand_target)

let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#expand_word_boundary = 1

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" add honza
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = ['deoplete.nvim']
on_ft = ['rust','javascript','python']
rev = 'next'
build = 'bash install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
  \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'python': ['pyls'],
  \ }
let g:LanguageClient_autoStart = 1 " NeoVim起動時にLSPを自動スタート
let g:LanguageClient_autoStop = 1
let g:LanguageClient_diagnosticsEnable = 0 " シンタックスチェックをOFF
let g:LanguageClient_changeThrottle = 1.5
let g:LanguageClient_completionPreferTextEdit = 0  " should be 0
let g:LanguageClient_diagnosticsSignsMax = 0
let g:LanguageClient_diagnosticsList = 'Disabled'
let g:LanguageClient_hasSnippetSupport = 0
let g:LanguageClient_waitOutputTimeout = 4
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_settingsPath = '.lsp.json'
" let g:LanguageClient_loggingLevel = 'DEBUG'
" let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'
" let g:LanguageClient_serverStderr = '/tmp/LanguageServer.log'
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
nnoremap <silent> <F3> :call LanguageClient_textDocument_references()<CR>
nnoremap <silent> <M-m> :call LanguageClient_contextMenu()<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'VimEnter'

[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
on_event = 'VimEnter'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#same_filetypes = {}
endif
let g:context_filetype#same_filetypes.php = 'phtml'
let g:context_filetype#same_filetypes.php = 'html'
let g:context_filetype#same_filetypes.html = 'php'
let b:context_filetype_filetypes = context_filetype#default_filetypes()
call extend(b:context_filetype_filetypes,
      \ {'php' : [
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'javascript',
      \   },
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\? type="text/coffeescript"\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'coffee',
      \   },
      \   {
      \    'start':
      \     '<script\%( [^>]*\)\?>',
      \    'end': '</script>', 'filetype': 'javascript',
      \   },
      \   {
      \    'start':
      \     '<style\%( [^>]*\)\?>',
      \    'end': '</style>', 'filetype': 'css',
      \   },
      \   {
      \    'start':
      \     '<[^>]\+ style=\([''"]\)',
      \    'end': '\1', 'filetype': 'css',
      \   },
      \ ]})
'''

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'virtual'
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neopairs.vim'
hook_add = '''
let g:neopairs#enable = 1
'''

[[plugins]]
repo = 'konfekt/FastFold'
on_event = 'VimEnter'

# text-----------------------------------

[[plugins]]
repo = 'mattn/emmet-vim'
# on_event = 'insertenter'
on_ft = ['html', 'php', 'phtml', 'javascript']
hook_add = '''
let g:user_emmet_install_global = 0
let g:user_emmet_mode='i'
autocmd MyAutoCmd FileType phtml,html,php,css EmmetInstall
imap <silent> <M-,> <C-y>,
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_event = 'InsertEnter'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
on_event = 'VimEnter'
hook_post_source = '''
autocmd MyAutoCmd BufEnter,BufRead,InsertLeave dein*.toml call Syntax_range_dein()
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_post_source = 'call SetLeximaAddRule()'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:hatpos:toggle)'
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_event = 'VimEnter'

[[plugins]]
repo = 'bfredl/nvim-miniyank'
on_event = 'VimEnter'
hook_add = '''
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)
let g:miniyank_filename = $HOME."/.miniyank.mpack"
let g:miniyank_maxitems = 100
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
on_event = 'VimEnter'
hook_add = '''
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T
map S S
autocmd MyAutoCmd ColorScheme * highlight Sneak ctermbg=24 ctermfg=16
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_event = 'VimEnter'
hook_add = '''
function g:Multiple_cursors_before()
  call deoplete#custom#buffer_option('auto_complete', v:false)
endfunction
function g:Multiple_cursors_after()
  call deoplete#custom#buffer_option('auto_complete', v:true)
endfunction
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
on_map = '<Plug>(easymotion-s2)'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
nmap m <Plug>(easymotion-s2)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
depends = [
'vim-textobj-entire', 'vim-textobj-indent', 'vim-textobj-php',
'vim-textobj-line', 'vim-textobj-syntax', 'vim-textobj-comment',
'vim-textobj-between', 'vim-textobj-from_regexp', 'vim-textobj-chunk'
]
on_event = 'VimEnter'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'thinca/vim-textobj-between'

[[plugins]]
repo = 'kana/vim-textobj-syntax'

[[plugins]]
repo = 'glts/vim-textobj-comment'
hook_add = '''
let g:textobj_comment_no_default_key_mappings = 1
xmap a/ <Plug>(textobj-comment-a)
omap a/ <Plug>(textobj-comment-a)
xmap i/ <Plug>(textobj-comment-i)
omap i/ <Plug>(textobj-comment-i)
xmap a? <Plug>(textobj-comment-big-a)
omap a? <Plug>(textobj-comment-big-a)
'''

[[plugins]]
repo = 'Chun-Yang/vim-textobj-chunk'

[[plugins]]
repo = 'akiyan/vim-textobj-php'

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'

[[plugins]]
repo = 'kana/vim-operator-user'
depends = ['vim-operator-replace']
on_map = '<plug>(operator-replace)'
on_event = 'VimEnter'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
nmap <C-s> <plug>(operator-replace)
'''

[[plugins]]
repo = 'thinca/vim-submode'
on_event = 'VimEnter'
hook_source = '''
let g:submode_timeoutlen = 5000
let g:submode_keep_leaving_key = 1
call submode#enter_with('history', 'n', '', 'g;', 'g;zz')
call submode#enter_with('history', 'n', '', 'g,', 'g,zz')
call submode#map('history', 'n', '', ';', 'g;zz')
call submode#map('history', 'n', '', ',', 'g,zz')
call submode#enter_with('bufmove', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', '<C-w>-', '<C-w>-')
call submode#enter_with('bufmove', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', '<C-w><', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'VimEnter'
hook_add = '''
let g:surround_{char2nr("P")} = "<?php \r ?>""
'''

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]]
repo = 'tpope/vim-abolish'
on_event = 'VimEnter'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = 'VimEnter'

[[plugins]]
repo = 'thirtythreeforty/lessspace.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'matze/vim-move'
on_event = 'VimEnter'

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'VimEnter'
hook_add = '''
autocmd MyAutoCmd ColorScheme * hi MatchWord ctermfg=None guifg=None cterm=underline gui=underline
let g:matchup_transmute_enabled = 1
'''

[[plugins]]
repo = 'wellle/targets.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'osyo-manga/vim-vigemo'
on_map = '<Plug>(vigemo-search)'
hook_add = '''
nmap <Space>/ <Plug>(vigemo-search)
'''

# list-----------------------------------

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = ['Defx']
hook_add = '''
nmap <silent><Space>n :Defx -toggle -direction=topleft -split=vertical -winwidth=35<CR>
autocmd MyAutoCmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#do_action('open', 'wincmd w \| drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#do_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> .
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> h
\ defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#do_action('cd')
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> cd
\ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'junegunn/fzf'
depends = ['fzf.vim', 'vim-bookmarks']
build = './install'
merged = 0
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" fzfからファイルにジャンプできるようにする
let g:fzf_buffers_jump = 1
nnoremap <silent> <Space>f :Files<CR>
nnoremap <silent> <Space>b :Buffers<CR>
nnoremap <silent> <Space>a :Rg<CR>
nnoremap <silent> <Space>l :Lines<CR>
nnoremap <silent> <Space>e :MRUFilesCWD<CR>
nnoremap <silent> <Space>. :DotFiles<CR>
nnoremap <silent> <space>O :Outline<CR>
nnoremap <silent> <space>M :Memo<CR>
nnoremap <silent> <space>gc :BCommits<CR>
nnoremap <silent> <space>gC :Commits<CR>
" <C-]>でタグ検索
nnoremap <silent> <C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
" <Space>]で使用箇所検索
nnoremap <silent> <expr> <Space>] ':Rg(' . expand('<cword>') . ')<CR>'
nnoremap <silent> <Space>p :YanksAfter<CR>
nnoremap <silent> <Space>P :YanksBefore<CR>
nnoremap <silent> q: :History:<CR>
nnoremap <silent> q/ :History/<CR>

imap <M-p> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)

nmap <Space><tab> <plug>(fzf-maps-n)
imap jc <plug>(fzf-maps-i)
xmap <Space><tab> <plug>(fzf-maps-x)
omap <Space><tab> <plug>(fzf-maps-o)

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#wrap('fzf',
  \ {'options': "--preview 'pygmentize -g {}'"}))
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, fzf#wrap('ag',
  \ {'options': "--preview 'pygmentize -g $(cut -d: -f1 <<< {}) | sed -n $(cut -d: -f2 <<< {}),\\$p | head -".&lines."'"}))
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)
command! -bang Lines
  \ call fzf#vim#lines({'options': '--reverse --height 40%'}, <bang>0)

command! DotFiles execute 'Files ~/dotfiles'

" Outline handling,
function! s:outline_format(lists)
  for list in a:lists
    let linenr = list[2][:len(list[2])-3]
    let line = getline(linenr)
    let idx = stridx(line, list[0])
    let len = len(list[0])
    let list[0] = line[:idx-1] . printf("\x1b[%s%sm%s\x1b[m", 34, '', line[idx:idx+len-1]) . line[idx+len:]
  endfor
  for list in a:lists
    call map(list, "printf('%s', v:val)")
  endfor
  retur a:lists
endfunction

function! s:outline_source(tag_cmds)
  if !filereadable(expand('%'))
    throw 'Save the file first'
  endif

  for cmd in a:tag_cmds
    let lines = split(system(cmd), "\n")
    if !v:shell_error
      break
    endif
  endfor
  if v:shell_error
    throw get(lines, 0, 'Failed to extract tags')
  elseif empty(lines)
    throw 'No tags found'
  endif
  return map(s:outline_format(map(lines, 'split(v:val, "\t")')), 'join(v:val, "\t")')
endfunction

function! s:outline_sink(lines)
  if !empty(a:lines)
    let line = a:lines[0]
    execute split(line, "\t")[2]
  endif
endfunction

function! s:outline(...)
  let args = copy(a:000)
  let tag_cmds = [
    \ printf('ctags -f - --sort=no --excmd=number --language-force=%s %s 2>/dev/null', &filetype, expand('%:S')),
    \ printf('ctags -f - --sort=no --excmd=number %s 2>/dev/null', expand('%:S'))]
  return {
    \ 'source':  s:outline_source(tag_cmds),
    \ 'sink*':   function('s:outline_sink'),
    \ 'options': '--reverse +m -d "\t" --with-nth 1 -n 1 --ansi --prompt "Outline> "'}
endfunction

command! -bang Outline call fzf#run(fzf#wrap('outline', s:outline(), <bang>0))

" MRU handling, limited to current directory
command! MRUFilesCWD call fzf#run({
  \  'source': s:mru_files_for_cwd(),
  \  'sink': 'edit',
  \  'options': '-m -x +s --prompt=MRU:'.shellescape(pathshorten(getcwd())).'/',
  \  'down': '40%'})

" This relies on the yegappan/mru plugin for live MRU updating. Also relies on
" the fact that you don't change the location of the file it uses as its cache.
function! s:mru_files_for_cwd()
  return map(filter(
  \  systemlist("sed -n '2,$p' ~/.vim_mru_files"),
  \  "v:val =~ '^" . getcwd() . "' && v:val !~ '__Tagbar__\\|\\[YankRing]\\|fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"
  \ ), 'fnamemodify(v:val, ":p:.")')
endfunction

command! -bang -nargs=* Memo
  \ call fzf#vim#grep(
  \   'rg --column -n --hidden --ignore-case --no-heading --color=always ' .shellescape(<q-args>) . ' ~/.cache/junkfile/', 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

" YankRing fzf
function! FZFYankList() abort
  function! KeyValue(key, val)
    let line = join(a:val[0], '⏎')
    if (a:val[1] ==# 'V')
      let line = '⏎'.line
    endif
    return a:key.' '.line
  endfunction
  return map(miniyank#read(), function('KeyValue'))
endfunction

function! FZFYankHandler(opt, line) abort
  let key = substitute(a:line, ' .*', '', '')
  if !empty(a:line)
    let yanks = miniyank#read()[key]
    call miniyank#drop(yanks, a:opt)
  endif
endfunction

command! YanksAfter call fzf#run(fzf#wrap('YanksAfter', {
\ 'source':  FZFYankList(),
\ 'sink':    function('FZFYankHandler', ['p']),
\ 'options': '--no-sort --prompt="Yanks-p> "',
\ }))

command! YanksBefore call fzf#run(fzf#wrap('YanksBefore', {
\ 'source':  FZFYankList(),
\ 'sink':    function('FZFYankHandler', ['P']),
\ 'options': '--no-sort --prompt="Yanks-P> "',
\ }))
'''

[[plugins]]
repo = 'mg979/vim-bookmarks'
rev = 'fzf'
hook_add = '''
let g:bookmark_prefer_fzf = 1
nmap <Space>mm <Plug>BookmarkToggle
nmap <Space>mi <Plug>BookmarkAnnotate
nmap <Space>ma <Plug>BookmarkShowAll
nmap <Space>mj <Plug>BookmarkNext
nmap <Space>mk <Plug>BookmarkPrev
nmap <Space>mc <Plug>BookmarkClear
nmap <Space>mx <Plug>BookmarkClearAll
nmap <Space>mkk <Plug>BookmarkMoveUp
nmap <Space>mjj <Plug>BookmarkMoveDown
nmap <Space>mg <Plug>BookmarkMoveToLine
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''
nnoremap <silent> <Space>o :TagbarToggle<CR>
let g:tagbar_autopreview = 1
let g:tagbar_compact = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_width = 40
let g:tagbar_previewwin_pos = 'rightbelow'
'''

[[plugins]]
repo = 'junegunn/vim-peekaboo'
on_event = 'VimEnter'

[[plugins]]
repo = 'yegappan/mru'
on_event = 'VimEnter'
hook_add = '''
let MRU_Max_Entries = 1000
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = ['MundoToggle']
hook_add = '''
nnoremap U :MundoToggle<CR>
'''

[[plugins]]
repo = 'brooth/far.vim'
on_event = 'VimEnter'
hook_add = '''
let g:far#source = 'agnvim'
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = ['JunkfileOpen']

[[plugins]]
repo = 'jeetsukumaran/vim-buffergator'
on_cmd = ['BuffergatorToggle']
hook_add = '''
let g:buffergator_vsplit_size = 35
nnoremap <silent> <Space>B :BuffergatorToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-dadbod'
on_event = 'VimEnter'

# git------------------------------------

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add = '''
nmap <Space>gns :Gina status<CR>
nmap <Space>gnb :Gina blame<CR>
nmap <Space>gp :Gina push<CR>
nmap <Space>gnc :Gina commit -m 'auto update'<CR>
nmap <Space>gA :Gina add .<CR>
'''
hook_source = '''
call gina#custom#command#option(
 \ '/\%(status\|log\|reflog\)',
 \ '--opener', 'split'
 \)
'''

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit']
hook_add = '''
nmap <Space>gl :Agit<CR>
'''

# lint & lsp & sources-------------------

[[plugins]]
repo = 'w0rp/ale'
on_event = 'VimEnter'
hook_add = '''
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
" let g:ale_fixers['html'] = ['tidy']
let g:ale_fixers['css'] = ['prettier']
let g:ale_fixers['scss'] = ['prettier']
let g:ale_fixers['php'] = ['prettier']
let g:ale_linters = {}
" let g:ale_linters['php'] = ['phan']
" ファイル保存時に実行
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 0
" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
" 設定を見直す必要あり
let g:ale_php_phan_executable = 'vendor/bin/phan'
let g:ale_html_tidy_options = '-config .tidyrc'
let g:ale_virtualtext_cursor = 1
'''

# php------------------------------------

[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'captbaritone/better-indent-support-for-php-with-html'
on_ft = ['html', 'php', 'phtml']

[[plugins]]
repo = 'padawan-php/deoplete-padawan'
on_ft = ['php', 'phtml']
build = 'composer install'

# [[plugins]]
# repo = 'roxma/LanguageServer-php-neovim',
# on_event = 'VimEnter'
# build = 'composer install && composer run-script parse-stubs'

# javascript & typescript----------------

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_event = 'VimEnter'

[[plugins]]
repo = 'burnettk/vim-angular'
on_ft = ['javascript']

# rust----------------------------------

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
